{"version":3,"file":"static/js/424.6487ac17.chunk.js","mappings":"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","sources":["Components/Common/BreadCrumb.js","pages/Medicine/Components/MedicineForm.js","pages/Medicine/Components/AddMedicine.js","pages/Medicine/Components/MedicineBar.js","pages/Medicine/Components/EditMedicine.js","pages/Medicine/Components/MedicineList.js","pages/Medicine/Components/MedicineCSV.js","pages/Medicine/index.js"],"sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row } from \"reactstrap\";\r\n\r\nconst BreadCrumb = ({ title, pageTitle }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Row>\r\n        <Col xs={12}>\r\n          <div className=\"page-title-box p-3 d-flex flex-column flex-sm-row align-items-start align-items-sm-center justify-content-between gap-2\">\r\n            {/* Page Title */}\r\n            <h4 className=\"mb-2 mb-sm-0\">{title}</h4>\r\n\r\n            {/* Breadcrumbs */}\r\n            <div className=\"page-title-right\">\r\n              <ol className=\"breadcrumb m-0\">\r\n                <li className=\"breadcrumb-item\">\r\n                  <Link to=\"#\">{pageTitle}</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item active\">{title}</li>\r\n              </ol>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BreadCrumb;\r\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { Form, Row, Col, Input, Button, FormFeedback } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport Select from \"react-select\";\n\n// Formik Validation\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\n\n//redux\nimport { useDispatch } from \"react-redux\";\nimport { addMedicine } from \"../../../store/actions\";\nimport {\n  medicineTypes,\n  medicineUnits,\n} from \"../../../Components/constants/medicine\";\nimport { duplicateMedicineValidator } from \"../../../store/features/medicine/medicineSlice\";\n\nfunction useDebounce(callback, delay) {\n  const timer = useRef(null);\n  function debouncedFn(...args) {\n    clearTimeout(timer.current);\n    timer.current = setTimeout(() => {\n      callback(...args);\n    }, delay);\n  }\n  return debouncedFn;\n}\n\nconst MedicinesForm = ({ toggle }) => {\n  const dispatch = useDispatch();\n  const [medicines, setMedicines] = useState([]);\n  const [errors, setErrors] = useState({});\n  const [hasErrors, setHasErrors] = useState(false);\n\n  useEffect(() => {\n    setHasErrors(Object.keys(errors).length > 0);\n  }, [errors]);\n\n  const checkStrength = async (idx, name, strength) => {\n    if (!name || !strength) {\n      setErrors((prev) => {\n        const copy = { ...prev };\n        delete copy[idx];\n        return copy;\n      });\n      return;\n    }\n\n    try {\n      const response = await dispatch(\n        duplicateMedicineValidator({ name, strength })\n      ).unwrap();\n\n      if (response.exists) {\n        setErrors((prev) => ({\n          ...prev,\n          [idx]: response.message,\n        }));\n      } else {\n        setErrors((prev) => {\n          const copy = { ...prev };\n          delete copy[idx];\n          return copy;\n        });\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const debouncedCheck = useDebounce(checkStrength, 500);\n\n  const addMedicines = () => {\n    const newMed = {\n      name: \"\",\n      type: \"\",\n      strength: \"\",\n      unit: \"\",\n      instruction: \"\",\n      composition: \"\",\n      quantity: \"\",\n      unitPrice: \"\",\n    };\n    setMedicines([...medicines, newMed]);\n  };\n\n  const handleChange = (e) => {\n    const medList = [...medicines];\n    const prop = e.target.name;\n    const value = e.target.value;\n    const idx = parseInt(e.target.id, 10);\n\n    medList[idx][prop] = value;\n    setMedicines(medList);\n\n    if (prop === \"strength\") {\n      debouncedCheck(idx, medList[idx].name, value);\n    } else if (prop === \"name\") {\n      if (medList[idx].strength) {\n        debouncedCheck(idx, value, medList[idx].strength);\n      }\n    }\n  };\n\n  const validation = useFormik({\n    enableReinitialize: true,\n    initialValues: { medicines },\n    validationSchema: Yup.object({\n      medicines: Yup.array().test(\n        \"notEmpty\",\n        \"At least one medicine is required\",\n        (value) => !!(value && value.length)\n      ),\n    }),\n    onSubmit: () => {\n      if (hasErrors) {\n        alert(\"Fix duplicate strengths before submitting\");\n        return;\n      }\n      dispatch(addMedicine(medicines));\n      setMedicines([]);\n      toggle();\n      validation.resetForm();\n    },\n  });\n\n  const removeMedicine = (idx) => {\n    const medList = [...medicines];\n    medList.splice(idx, 1);\n    setMedicines(medList);\n    setErrors((prev) => {\n      const copy = { ...prev };\n      delete copy[idx];\n      return copy;\n    });\n  };\n\n  return (\n    <Form\n      onSubmit={(e) => {\n        e.preventDefault();\n        validation.handleSubmit();\n        return false;\n      }}\n      className=\"needs-validation\"\n    >\n      <Row className=\"ps-3 pe-3\">\n        <Col className=\"mb-3 pb-2 border-bottom\" xs={2} md={2}>\n          Name<span className=\"text-danger\">*</span>\n        </Col>\n        <Col className=\"mb-3 pb-2 border-bottom\" xs={2} md={1}>\n          Type<span className=\"text-danger\">*</span>\n        </Col>\n        <Col className=\"mb-3 pb-2 border-bottom\" xs={2} md={1}>\n          Strength\n        </Col>\n        <Col className=\"mb-3 pb-2 border-bottom\" xs={2} md={1}>\n          Unit\n        </Col>\n        <Col className=\"mb-3 pb-2 border-bottom\" xs={4} md={2}>\n          Instruction\n        </Col>\n        <Col className=\"mb-3 pb-2 border-bottom\" xs={4} md={2}>\n          Composition\n        </Col>\n        <Col className=\"mb-3 pb-2 border-bottom\" xs={4} md={1}>\n          Quantity\n        </Col>\n        <Col className=\"mb-3 pb-2 border-bottom\" xs={4} md={1}>\n          Unit price\n        </Col>\n\n        <Col className=\"mb-3 pb-2 border-bottom\" xs={4} md={1}></Col>\n        {(medicines || []).map((medicine, idx) => (\n          <React.Fragment key={idx}>\n            <Col xs={2} md={2}>\n              <div className=\"mb-3 w-5\">\n                <Input\n                  required\n                  bsSize=\"sm\"\n                  id={idx}\n                  onChange={handleChange}\n                  name=\"name\"\n                  value={medicine.name}\n                  type=\"text\"\n                  className=\"form-control\"\n                />\n              </div>\n            </Col>\n\n            <Col xs={3} md={2}>\n              <div className=\"mb-3 w-5\">\n                {/* <div class=\"form-group\">\n                      <input\n                        list=\"type-options\"\n                        className=\"form-control form-control-sm\"\n                        id={idx}\n                        onChange={handleChange}\n                        name=\"type\"\n                        value={medicine.type}\n                        placeholder=\"select an type\"\n                      />\n                      <datalist id=\"type-options\">\n                        {(medicineTypes || []).map((item, idx) => (\n                          <option\n                            key={idx + item}\n                            value={item}\n                            className=\"text-cap\"\n                          ></option>\n                        ))}\n                      </datalist>\n                    </div> */}\n                <Input\n                  bsSize=\"sm\"\n                  id={idx}\n                  onChange={handleChange}\n                  name=\"type\"\n                  value={medicine.type}\n                  type=\"select\"\n                  className=\"form-control\"\n                >\n                  <option value=\"\" selected disabled hidden>\n                    Choose Type\n                  </option>\n                  {(medicineTypes || []).map((item, idx) => (\n                    <option key={idx + item} value={item} className=\"text-cap\">\n                      {item}\n                    </option>\n                  ))}\n                </Input>\n              </div>\n            </Col>\n\n            <Col xs={2} md={1}>\n              <div className=\"mb-3\">\n                <Input\n                  bsSize=\"sm\"\n                  id={idx}\n                  onChange={handleChange}\n                  name=\"strength\"\n                  value={medicine.strength}\n                  type=\"text\"\n                  invalid={!!errors[idx]}\n                />\n                {/* {errors[idx] && <FormFeedback>{errors[idx]}</FormFeedback>} */}\n              </div>\n            </Col>\n            <Col xs={3} md={2}>\n              <div className=\"mb-3\">\n                {/* <Select\n                      options={options}\n                      placeholder=\"Type or select an option\"\n                      isClearable\n                      value={options.find(\n                        (option) => option.value === medicine.unit\n                      )}\n                      onChange={(selected) => {\n                        handleChange({\n                          target: {\n                            name: \"unit\",\n                            value: selected ? selected.value : \"\",\n                          },\n                        });\n                      }}\n                    /> */}\n                <div class=\"form-group\">\n                  {/* <input\n                        list=\"unit-options\"\n                        className=\"form-control form-control-sm\"\n                        id={idx}\n                        onChange={(e) => {\n                          handleChange(e);\n                          if (e.target.value === \"\") {\n                            // Blur and refocus to re-trigger datalist suggestions\n                            e.target.blur();\n                            setTimeout(() => e.target.focus(), 0);\n                          }\n                        }}\n                        name=\"unit\"\n                        value={medicine.unit}\n                        placeholder=\"Type or select an option\"\n                      /> */}\n                  <Input\n                    bsSize=\"sm\"\n                    id={idx}\n                    onChange={handleChange}\n                    name=\"unit\"\n                    value={medicine.unit}\n                    type=\"select\"\n                    className=\"form-control\"\n                  >\n                    <option value=\"\" selected disabled hidden>\n                      Choose Unit\n                    </option>\n                    {(medicineUnits || []).map((item, idx) => (\n                      <option key={idx + item}>{item}</option>\n                    ))}\n                  </Input>\n                  <datalist id=\"unit-options\">\n                    {(medicineUnits || []).map((item, idx) => (\n                      <option\n                        key={idx + item}\n                        value={item}\n                        className=\"text-cap\"\n                      ></option>\n                    ))}\n                  </datalist>\n                </div>\n                {/* <Input\n                      bsSize=\"sm\"\n                      id={idx}\n                      onChange={handleChange}\n                      name=\"unit\"\n                      value={medicine.unit}\n                      type=\"select\"\n                      className=\"form-control\"\n                    >\n                      <option value=\"\" selected disabled hidden>\n                        Choose Unit\n                      </option>\n                      {(medicineUnits || []).map((item, idx) => (\n                        <option key={idx + item}>{item}</option>\n                      ))}\n                    </Input> */}\n              </div>\n            </Col>\n            <Col xs={3} md={2}>\n              <div className=\"mb-3\">\n                <Input\n                  bsSize=\"sm\"\n                  id={idx}\n                  onChange={handleChange}\n                  name=\"instruction\"\n                  value={medicine.instruction}\n                  type=\"textarea\"\n                  rows=\"1\"\n                  className=\"form-control\"\n                />\n              </div>\n            </Col>\n            <Col xs={3} md={2}>\n              <div className=\"mb-3\">\n                <Input\n                  bsSize=\"sm\"\n                  id={idx}\n                  required\n                  onChange={handleChange}\n                  name=\"composition\"\n                  value={medicine.composition}\n                  type=\"textarea\"\n                  rows=\"1\"\n                  className=\"form-control\"\n                />\n              </div>\n            </Col>\n            <Col xs={3} md={1}>\n              <div className=\"mb-3\">\n                <Input\n                  bsSize=\"sm\"\n                  id={idx}\n                  required\n                  onChange={handleChange}\n                  name=\"quantity\"\n                  value={medicine.quantity}\n                  type=\"number\"\n                  rows=\"1\"\n                  className=\"form-control\"\n                />\n              </div>\n            </Col>\n            <Col xs={3} md={1}>\n              <div className=\"mb-3\">\n                <Input\n                  bsSize=\"sm\"\n                  id={idx}\n                  required\n                  onChange={handleChange}\n                  name=\"unitPrice\"\n                  value={medicine.unitPrice}\n                  type=\"number\"\n                  rows=\"1\"\n                  className=\"form-control\"\n                />\n              </div>\n            </Col>\n            <Col xs={1} md={1}>\n              <Button\n                size=\"sm\"\n                onClick={() => removeMedicine(idx)}\n                color=\"danger\"\n              >\n                <i className=\"ri-delete-bin-6-line fs-14 text-white\"></i>\n              </Button>\n            </Col>\n          </React.Fragment>\n        ))}\n\n        <Col xs={12} className=\"mb-3\">\n          {validation.touched.medicines && validation.errors.medicines ? (\n            <FormFeedback type=\"invalid\" className=\"d-block\">\n              {validation.errors.medicines}\n            </FormFeedback>\n          ) : null}\n        </Col>\n        <Col>\n          <div className=\"d-flex justify-content-between\">\n            <Button\n              size=\"sm\"\n              type=\"button\"\n              color=\"secondary\"\n              outline\n              onClick={addMedicines}\n            >\n              Add\n            </Button>\n            <Button\n              size=\"sm\"\n              type=\"submit\"\n              color=\"primary\"\n              outline\n              disabled={hasErrors || medicines.length === 0}\n            >\n              Save\n            </Button>\n          </div>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nMedicinesForm.propTypes = {\n  toggle: PropTypes.func.isRequired,\n};\n\nexport default MedicinesForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CustomModal from \"../../../Components/Common/Modal\";\nimport MedicineForm from \"./MedicineForm\";\n\nconst AddMedicines = ({ modal, toggle, ...rest }) => {\n  return (\n    <React.Fragment>\n      <CustomModal\n        size={\"xl\"}\n        isOpen={modal}\n        toggle={toggle}\n        centered\n        title={\"Add Medicine\"}\n      >\n        <MedicineForm toggle={toggle} {...rest} />\n      </CustomModal>\n    </React.Fragment>\n  );\n};\n\nAddMedicines.propTypes = {\n  modal: PropTypes.bool,\n  toggle: PropTypes.func,\n};\n\nexport default AddMedicines;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CardBody,\n  Row,\n  Col,\n  Input,\n  Button,\n  InputGroup,\n  InputGroupText,\n} from \"reactstrap\";\n\nconst MedicineBar = ({ toggleForm, toggleCSV, setSearchItem }) => {\n  const [tempSearch, setTempSearch] = useState(\"\");\n\n  useEffect(() => {\n    const delayDebounce = setTimeout(() => {\n      setSearchItem(tempSearch);\n    }, 500);\n\n    return () => clearTimeout(delayDebounce);\n  }, [tempSearch, setSearchItem]);\n\n  return (\n    // <Card>\n    <CardBody className=\"p-3 bg-white\">\n      <Row className=\"g-2 align-items-center\">\n        <Col sm={4}>\n          <InputGroup>\n            <Input\n              type=\"text\"\n              value={tempSearch}\n              onChange={(e) => setTempSearch(e.target.value)}\n              placeholder=\"Search for name\"\n            />\n            <InputGroupText>\n              <i className=\"ri-search-line\"></i>\n            </InputGroupText>\n          </InputGroup>\n        </Col>\n\n        <Col className=\"col-sm-auto me-auto\">\n          <Button color=\"info\" className=\"text-white\" onClick={toggleCSV}>\n            <i className=\"ri-file-paper-2-line\"></i>\n          </Button>\n        </Col>\n\n        <Col className=\"col-sm-auto ms-auto\">\n          <Button color=\"success\" className=\"text-white\" onClick={toggleForm}>\n            <i className=\"ri-add-fill me-1 align-bottom\"></i> Add Medicine\n          </Button>\n        </Col>\n      </Row>\n    </CardBody>\n    // </Card>/\n  );\n};\n\nMedicineBar.propTypes = {\n  toggleForm: PropTypes.func.isRequired,\n  toggleCSV: PropTypes.func.isRequired,\n  setSearchItem: PropTypes.func.isRequired,\n};\n\nexport default MedicineBar;\n","import React, { useRef, useState } from \"react\";\nimport { Col, Button, Input, FormFeedback, Form, Row } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\n//redux\nimport { useDispatch } from \"react-redux\";\nimport { updateMedicine as updMedicine } from \"../../../store/actions\";\n\n// Formik Validation\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport {\n  medicineTypes,\n  medicineUnits,\n} from \"../../../Components/constants/medicine\";\nimport { duplicateMedicineValidator } from \"../../../store/features/medicine/medicineSlice\";\nimport { toast } from \"react-toastify\";\n\nfunction useDebounce(callback, delay) {\n  const timer = useRef(null);\n  return (...args) => {\n    clearTimeout(timer.current);\n    timer.current = setTimeout(() => {\n      callback(...args);\n    }, delay);\n  };\n}\n\nconst EditMedicine = ({ updateMedicine, setUpdateMedicine }) => {\n  const dispatch = useDispatch();\n  const data = updateMedicine?.formData;\n\n  const [dupError, setDupError] = useState(\"\");\n\n  const checkDuplicate = async (name, strength, id) => {\n    if (!name || !strength) return;\n\n    try {\n      const response = await dispatch(duplicateMedicineValidator({name, strength, id:data?._id})).unwrap();\n\n      if (response.exists) {\n        setDupError(response.message);\n      } else {\n        setDupError(\"\");\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const debouncedCheck = useDebounce(checkDuplicate, 500);\n\n  const validation = useFormik({\n    // enableReinitialize : use this flag when initial values needs to be changed\n    enableReinitialize: true,\n\n    initialValues: {\n      id: data?._id || \"\",\n      name: data?.name || \"\",\n      type: data?.type || \"\",\n      strength: data?.strength || \"\",\n      unit: data?.unit || \"\",\n      instruction: data?.instruction || \"\",\n      composition: data?.composition || \"\",\n      quantity: data?.quantity || \"\",\n      unitPrice: data?.unitPrice || \"\",\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().required(\"Please Enter Medicine Name\"),\n    }),\n    onSubmit: (values) => {\n      if (dupError) {\n        toast.errror(\"Fix duplicate strength before saving\");\n        return;\n      }\n\n      dispatch(updMedicine(values));\n      setUpdateMedicine({\n        isForm: false,\n        formIndex: undefined,\n        formData: undefined,\n      });\n      validation.resetForm();\n    },\n  });\n\n  return (\n    <React.Fragment>\n      <Form\n        onSubmit={(e) => {\n          e.preventDefault();\n          validation.handleSubmit();\n          return false;\n        }}\n        className=\"needs-validation\"\n        action=\"#\"\n      >\n        <Row className=\"align-items-center\">\n          <Col className=\"mb-3 pb-2 border-bottom\" xs={2} md={2}>\n            <Input\n              onChange={(e) => {\n                validation.handleChange(e);\n                if (validation.values.strength) {\n                  debouncedCheck(e.target.value, validation.values.strength, validation.values.id);\n                }\n              }}\n              name=\"name\"\n              onBlur={validation.handleBlur}\n              value={validation.values.name || \"\"}\n              bsSize={\"sm\"}\n            />\n            {validation.touched.name && validation.errors.name ? (\n              <FormFeedback type=\"invalid\" className=\"d-block\">\n                {validation.errors.name}\n              </FormFeedback>\n            ) : null}\n          </Col>\n\n          <Col className=\"mb-3 pb-2 border-bottom\" xs={2} md={2}>\n            <Input\n              className=\"bg-white\"\n              onChange={validation.handleChange}\n              name=\"type\"\n              type=\"select\"\n              onBlur={validation.handleBlur}\n              value={validation.values.type || \"\"}\n              bsSize={\"sm\"}\n            >\n              <option value=\"\" selected disabled hidden>\n                Choose Type\n              </option>\n              {(medicineTypes || []).map((item, idx) => (\n                <option key={idx + item} value={item} className=\"text-cap\">\n                  {item}\n                </option>\n              ))}\n            </Input>\n          </Col>\n\n          <Col className=\"mb-3 pb-2 border-bottom\" xs={2} md={2}>\n            <Input\n              onChange={(e) => {\n                validation.handleChange(e);\n                debouncedCheck(\n                  validation.values.name,\n                  e.target.value,\n                  validation.values.id\n                );\n              }}\n              name=\"strength\"\n              onBlur={validation.handleBlur}\n              value={validation.values.strength || \"\"}\n              bsSize={\"sm\"}\n              invalid={!!dupError}\n            />\n            {dupError && (\n              <FormFeedback className=\"d-block\">{dupError}</FormFeedback>\n            )}\n          </Col>\n          <Col className=\"mb-3 pb-2 border-bottom\" xs={2} md={2}>\n            <Input\n              className=\"bg-white\"\n              onChange={validation.handleChange}\n              name=\"unit\"\n              type=\"select\"\n              onBlur={validation.handleBlur}\n              value={validation.values.unit || \"\"}\n              bsSize={\"sm\"}\n            >\n              <option value=\"\" selected disabled hidden>\n                Choose Unit\n              </option>\n              {(medicineUnits || []).map((item, idx) => (\n                <option key={idx + item}>{item}</option>\n              ))}\n            </Input>\n          </Col>\n          <Col className=\"mb-3 pb-2 border-bottom\" xs={4} md={3}>\n            <Input\n              onChange={validation.handleChange}\n              name=\"instruction\"\n              onBlur={validation.handleBlur}\n              value={validation.values.instruction || \"\"}\n              type=\"textarea\"\n              rows=\"1\"\n              bsSize={\"sm\"}\n            />\n          </Col>\n          <Col className=\"mb-3 pb-2 border-bottom\" xs={4} md={3}>\n            <Input\n              onChange={validation.handleChange}\n              name=\"composition\"\n              onBlur={validation.handleBlur}\n              value={validation.values.composition || \"\"}\n              type=\"textarea\"\n              rows=\"1\"\n              bsSize={\"sm\"}\n            />\n          </Col>\n          <Col className=\"mb-3 pb-2 border-bottom\" xs={4} md={3}>\n            <Input\n              onChange={validation.handleChange}\n              name=\"quantity\"\n              onBlur={validation.handleBlur}\n              value={validation.values.quantity || \"\"}\n              type=\"textarea\"\n              rows=\"1\"\n              bsSize={\"sm\"}\n            />\n          </Col>\n          <Col className=\"mb-3 pb-2 border-bottom\" xs={4} md={3}>\n            <Input\n              onChange={validation.handleChange}\n              name=\"unitPrice\"\n              onBlur={validation.handleBlur}\n              value={validation.values.unitPrice || \"\"}\n              type=\"textarea\"\n              rows=\"1\"\n              bsSize={\"sm\"}\n            />\n          </Col>\n          <Col\n            className=\"mb-3 pb-2 border-bottom align-items-end d-flex\"\n            xs={4}\n            md={1}\n          >\n            <Button\n              type=\"button\"\n              onClick={() => {\n                    setUpdateMedicine({\n                  isForm: false,\n                  formIndex: undefined,\n                  formData: undefined,\n                });\n              }}\n              className=\"me-3\"\n              size=\"sm\"\n              color=\"danger\"\n              outline\n            >\n              <i className=\"ri-close-circle-line fs-5\"></i>\n            </Button>\n            <Button\n              type=\"submit\"\n              size=\"sm\"\n              color=\"success\"\n              disabled={!!dupError} \n            >\n              <i className=\"ri-check-line fs-5\"></i>\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    </React.Fragment>\n  );\n};\n\nEditMedicine.propTypes = {\n  updateMedicine: PropTypes.object,\n  setUpdateMedicine: PropTypes.func,\n};\n\nexport default EditMedicine;\n","import React, { useState } from \"react\";\nimport { Button, Row, Col, Table, Input } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport EditMedicine from \"./EditMedicine\";\nimport { connect } from \"react-redux\";\n\nconst MedicinesList = ({\n  medicines,\n  totalCount,\n  setDeleteMedicine,\n  toggleDeleteModal,\n  searchItem,\n  currentPage,\n  itemsPerPage,\n  onPageChange,\n  onItemsPerPageChange,\n}) => {\n  const [updateMedicine, setUpdateMedicine] = useState({\n    isForm: false,\n    formIndex: undefined,\n    formData: undefined,\n  });\n\n  const toggleUpdateForm = (idx, data) =>\n    setUpdateMedicine({\n      isForm: true,\n      formIndex: idx,\n      formData: data,\n    });\n\n  const totalPages = Math.ceil(totalCount / itemsPerPage);\n\n  return (\n    <div className=\"p-4 bg-light rounded shadow-sm\">\n      <Row className=\"mb-3 align-items-center\">\n        <Col xs=\"auto\">\n          <Input\n            type=\"select\"\n            value={itemsPerPage}\n            onChange={(e) => onItemsPerPageChange(Number(e.target.value))}\n            style={{ width: \"120px\" }}\n          >\n            {[5, 10, 25, 50].map((size) => (\n              <option key={size} value={size}>\n                {size}\n              </option>\n            ))}\n          </Input>\n        </Col>\n        <Col className=\"text-end text-muted\">\n          Page {currentPage} of {totalPages}\n        </Col>\n      </Row>\n\n      <Table bordered hover className=\"bg-white\">\n        <thead className=\"table-primary text-center\">\n          <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Strength</th>\n            <th>Unit</th>\n            <th>Expiry</th>\n            <th>Instruction</th>\n            <th>Composition</th>\n            <th>Quantity</th>\n            <th>Unit Price</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {(medicines || [])\n            .filter((item) =>\n              item.name.toLowerCase().includes(searchItem.toLowerCase())\n            )\n            .map((item, idx) => (\n              <tr key={item._id}>\n                {updateMedicine.isForm && updateMedicine.formIndex === idx ? (\n                  <td colSpan=\"10\">\n                    <EditMedicine\n                      updateMedicine={updateMedicine}\n                      setUpdateMedicine={setUpdateMedicine}\n                    />\n                  </td>\n                ) : (\n                  <>\n                    <td className=\"text-capitalize fw-semibold text-primary\">\n                      {item.name}\n                    </td>\n                    <td>{item.type || \"\"}</td>\n                    <td>{item.strength || \"\"}</td>\n                    <td>{item.unit || \"\"}</td>\n                    <td>{item.expiry || \"\"}</td>\n                    <td>{item.instruction || \"\"}</td>\n                    <td>{item.composition || \"\"}</td>\n                    <td>{item.quantity || \"\"}</td>\n                    <td>{item.unitPrice || \"\"}</td>\n                    <td>\n                      <Button\n                        size=\"sm\"\n                        color=\"info\"\n                        className=\"me-2\"\n                        onClick={() => toggleUpdateForm(idx, item)}\n                      >\n                        <i className=\"ri-quill-pen-line\"></i>\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        color=\"danger\"\n                        outline\n                        onClick={() =>\n                          setDeleteMedicine({ isOpen: true, data: item._id })\n                        }\n                      >\n                        <i className=\"ri-close-circle-line\"></i>\n                      </Button>\n                    </td>\n                  </>\n                )}\n              </tr>\n            ))}\n        </tbody>\n      </Table>\n\n      <Row className=\"mt-4 justify-content-between align-items-center\">\n        <Col xs=\"auto\">\n          <Button\n            color=\"secondary\"\n            disabled={currentPage === 1}\n            onClick={() => onPageChange(currentPage - 1)}\n          >\n            ← Previous\n          </Button>\n        </Col>\n        <Col className=\"text-center text-muted\">\n          Showing {Math.min((currentPage - 1) * itemsPerPage + 1, totalCount)}–\n          {Math.min(currentPage * itemsPerPage, totalCount)} of {totalCount}\n        </Col>\n        <Col xs=\"auto\">\n          <Button\n            color=\"secondary\"\n            disabled={currentPage === totalPages}\n            onClick={() => onPageChange(currentPage + 1)}\n          >\n            Next →\n          </Button>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nMedicinesList.propTypes = {\n  medicines: PropTypes.array.isRequired,\n  totalCount: PropTypes.number.isRequired,\n  setDeleteMedicine: PropTypes.func.isRequired,\n  toggleDeleteModal: PropTypes.func,\n  searchItem: PropTypes.string,\n  currentPage: PropTypes.number.isRequired,\n  itemsPerPage: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n  onItemsPerPageChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  medicines: state.Medicine.data,\n  totalCount: state.Medicine.totalCount,\n});\n\nexport default connect(mapStateToProps)(MedicinesList);\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport CustomModal from \"../../../Components/Common/Modal\";\nimport CSVReader from \"react-csv-reader\";\nimport DataTable from \"react-data-table-component\";\nimport { Input, Label } from \"reactstrap\";\nimport { connect } from \"react-redux\";\n\n// Formik Validation\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\n\nconst MedicineCSV = ({ modal, toggle, centers, ...rest }) => {\n  const [viewMedicines, setViewMedicines] = useState([]);\n\n  const papaparseOptions = {\n    header: true,\n    dynamicTyping: true,\n    skipEmptyLines: true,\n    transformHeader: (header) => header.toLowerCase().replace(/\\W/g, \"_\"),\n  };\n\n  const handleForce = (data, fileInfo) => setViewMedicines(data);\n\n  const validation = useFormik({\n    // enableReinitialize : use this flag when initial values needs to be changed\n    enableReinitialize: true,\n\n    initialValues: {\n      centers: centers.map((c) => c._id) || [],\n    },\n    validationSchema: Yup.object({\n      pageAccess: Yup.array().test(\n        \"notEmpty\",\n        \"Centers is required\",\n        (value) => {\n          if (!value || value.length === 0) {\n            return false;\n          }\n          return true;\n        }\n      ),\n    }),\n    onSubmit: (values) => {},\n  });\n\n  const columns = [\n    {\n      name: \"Name\",\n      selector: (row) => row.drug_name,\n    },\n    {\n      name: \"Type\",\n      selector: (row) => row.type,\n    },\n    {\n      name: \"Strength\",\n      selector: (row) => row.strength,\n    },\n    {\n      name: \"Unit\",\n      selector: (row) => row.unit,\n    },\n    {\n      name: \"Instructions\",\n      selector: (row) => row.instruction,\n    },\n    {\n      name: \"Composition\",\n      selector: (row) => row.composition,\n    },\n    {\n      name: \"Quantity\",\n      selector: (row) => row.quantity,\n    },\n    {\n      name: \"Batch Number\",\n      selector: (row) => row.batch_number,\n    },\n    {\n      name: \"Expiry Date\",\n      selector: (row) => row.expiry_date,\n    },\n    {\n      name: \"Unit Price\",\n      selector: (row) => row.unit_price,\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <CustomModal\n        size={\"xl\"}\n        isOpen={modal}\n        toggle={toggle}\n        centered\n        title={\"Add Medicine\"}\n      >\n        <div>\n          <CSVReader\n            cssClass=\"csv-reader-input\"\n            label=\"Select Medicine CSV\"\n            onFileLoaded={handleForce}\n            //   onError={this.handleDarkSideForce}\n            parserOptions={papaparseOptions}\n            inputId=\"ObiWan\"\n            inputName=\"ObiWan\"\n            inputStyle={{ color: \"red\" }}\n          />\n        </div>\n        <div className=\"\">\n          <h6 className=\"display-6 fs-4 d-block\">Centers</h6>\n          <div className=\"d-flex flex-wrap\">\n            {(centers || []).map((center) => (\n              <div\n                key={center._id}\n                className=\"d-flex me-5 mb-2 align-items-center\"\n              >\n                <Input\n                  className=\"me-2 mt-0\"\n                  type={\"checkbox\"}\n                  name={\"centers\"}\n                  value={center._id}\n                  onChange={validation.handleChange}\n                  checked={validation.values.centers.includes(center._id)}\n                />\n                <Label className=\"form-label fs-9 mb-0\">{center.title}</Label>\n              </div>\n            ))}\n          </div>\n        </div>\n        <div className=\"mt-4\">\n          <h6 className=\"display-6 fs-5\">Preview Medicine</h6>\n          <DataTable\n            fixedHeader\n            columns={columns}\n            data={viewMedicines || []}\n            highlightOnHover\n          />\n        </div>\n      </CustomModal>\n    </React.Fragment>\n  );\n};\n\nMedicineCSV.propTypes = {\n  modal: PropTypes.bool,\n  toggle: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n  centers: state.Center.data,\n});\n\nexport default connect(mapStateToProps)(MedicineCSV);\n","import React, { useEffect, useState } from \"react\";\nimport Breadcrumb from \"../../Components/Common/BreadCrumb\";\nimport AddMedicines from \"./Components/AddMedicine\";\nimport MedicineBar from \"./Components/MedicineBar\";\nimport DeleteModal from \"../../Components/Common/DeleteModal\";\nimport MedicineList from \"./Components/MedicineList\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchMedicines, removeMedicine } from \"../../store/actions\";\nimport MedicineCSV from \"./Components/MedicineCSV\";\n\nconst Medicine = () => {\n  const dispatch = useDispatch();\n  const medicines = useSelector((state) => state.Medicine.data);\n  const totalCount = useSelector((state) => state.Medicine.totalCount);\n  const totalPages = useSelector((state) => state.Medicine.totalPages);\n\n  const [modal, setModal] = useState(false);\n  const [CSVModal, setCSVModal] = useState(false);\n  const [deleteMedicine, setDeleteMedicine] = useState({\n    isOpen: false,\n    data: null,\n  });\n\n  const [searchItem, setSearchItem] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10);\n\n  const toggleForm = () => setModal(!modal);\n  const toggleCSV = () => setCSVModal(!CSVModal);\n\n  const dltMedicine = () => {\n    dispatch(removeMedicine(deleteMedicine.data));\n    setDeleteMedicine({ isOpen: false, data: null });\n  };\n\n  const cancelDeleteMedicine = () => {\n    setDeleteMedicine({ isOpen: false, data: null });\n  };\n\n  const handleItemsPerPageChange = (value) => {\n    setItemsPerPage(value);\n    setCurrentPage(1);\n  };\n\n  const handlePageChange = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  useEffect(() => {\n    dispatch(\n      fetchMedicines({\n        page: currentPage,\n        limit: itemsPerPage,\n        search: searchItem,\n      })\n    );\n  }, [dispatch, currentPage, itemsPerPage, searchItem]);\n\n  return (\n    <div className=\"container-fluid d-flex flex-column h-100 px-3\">\n      <div className=\"mt-4 mx-4\">\n        <Breadcrumb title=\"Medicine\" pageTitle=\"Medicine\" />\n      </div>\n\n      <MedicineBar\n        toggleForm={toggleForm}\n        toggleCSV={toggleCSV}\n        setSearchItem={setSearchItem}\n      />\n\n      <div className=\"flex-grow-1 d-flex flex-column overflow-auto\">\n        <MedicineList\n          medicines={medicines}\n          totalCount={totalCount}\n          totalPages={totalPages}\n          searchItem={searchItem}\n          setDeleteMedicine={setDeleteMedicine}\n          currentPage={currentPage}\n          itemsPerPage={itemsPerPage}\n          onPageChange={handlePageChange}\n          onItemsPerPageChange={handleItemsPerPageChange}\n        />\n      </div>\n\n      <AddMedicines modal={modal} toggle={toggleForm} />\n      <MedicineCSV modal={CSVModal} toggle={toggleCSV} />\n      <DeleteModal\n        show={deleteMedicine.isOpen}\n        onDeleteClick={dltMedicine}\n        onCloseClick={cancelDeleteMedicine}\n      />\n    </div>\n  );\n};\n\nexport default Medicine;\n"],"names":["_ref","title","pageTitle","_jsx","React","children","Row","Col","xs","_jsxs","className","Link","to","toggle","dispatch","useDispatch","medicines","setMedicines","useState","errors","setErrors","hasErrors","setHasErrors","useEffect","Object","keys","length","debouncedCheck","callback","delay","timer","useRef","_len","arguments","args","Array","_key","clearTimeout","current","setTimeout","useDebounce","async","idx","name","strength","response","duplicateMedicineValidator","unwrap","exists","prev","_objectSpread","message","copy","err","console","error","handleChange","e","medList","prop","target","value","parseInt","id","validation","useFormik","enableReinitialize","initialValues","validationSchema","Yup","test","onSubmit","alert","addMedicine","resetForm","Form","preventDefault","handleSubmit","md","map","medicine","Input","required","bsSize","onChange","type","selected","disabled","hidden","medicineTypes","item","invalid","class","unit","medicineUnits","instruction","rows","composition","quantity","unitPrice","Button","size","onClick","splice","removeMedicine","color","touched","FormFeedback","outline","addMedicines","modal","rest","_objectWithoutProperties","_excluded","CustomModal","isOpen","centered","MedicineForm","toggleForm","toggleCSV","setSearchItem","tempSearch","setTempSearch","delayDebounce","CardBody","sm","InputGroup","placeholder","InputGroupText","updateMedicine","setUpdateMedicine","data","formData","dupError","setDupError","_id","values","toast","errror","updMedicine","isForm","formIndex","undefined","action","onBlur","handleBlur","connect","state","Medicine","totalCount","setDeleteMedicine","toggleDeleteModal","searchItem","currentPage","itemsPerPage","onPageChange","onItemsPerPageChange","totalPages","Math","ceil","Number","style","width","Table","bordered","hover","filter","toLowerCase","includes","colSpan","EditMedicine","_Fragment","expiry","toggleUpdateForm","min","centers","Center","viewMedicines","setViewMedicines","c","pageAccess","CSVReader","cssClass","label","onFileLoaded","handleForce","fileInfo","parserOptions","header","dynamicTyping","skipEmptyLines","transformHeader","replace","inputId","inputName","inputStyle","center","checked","Label","DataTable","fixedHeader","columns","selector","row","drug_name","batch_number","expiry_date","unit_price","highlightOnHover","useSelector","setModal","CSVModal","setCSVModal","deleteMedicine","setCurrentPage","setItemsPerPage","fetchMedicines","page","limit","search","Breadcrumb","MedicineBar","MedicineList","pageNumber","AddMedicines","MedicineCSV","DeleteModal","show","onDeleteClick","dltMedicine","onCloseClick","cancelDeleteMedicine"],"sourceRoot":""}