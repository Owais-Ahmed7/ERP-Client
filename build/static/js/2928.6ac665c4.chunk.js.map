{"version":3,"file":"static/js/2928.6ac665c4.chunk.js","mappings":"yNAUA,MA8BA,GAAeA,EAAAA,EAAAA,GA9BCC,IACd,MAAMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAWC,aAAaC,QAAQ,YAChCC,EAAQH,EAAWI,KAAKC,MAAML,GAAUG,MAAQ,MAChD,aAAEG,IAAiBC,EAAAA,EAAAA,IAAaC,IAAK,CACzCF,aAAcE,EAAMC,KAAKH,gBAa3B,OAVAI,EAAAA,EAAAA,WAAU,KACaC,WACnBb,GAASc,EAAAA,EAAAA,KAAWT,IACpBF,aAAaY,QACbC,eAAeD,SAGjBE,IACC,CAACjB,IAEAQ,GACKU,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAG,YAGfF,EAAAA,EAAAA,KAAAG,EAAAA,SAAA,K","sources":["pages/Authentication/Logout.js"],"sourcesContent":["import PropTypes from \"prop-types\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport withRouter from \"../../Components/Hooks/withRouter\";\r\n\r\nimport { logoutUser } from \"../../store/actions\";\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst Logout = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const authUser = localStorage.getItem(\"authUser\");\r\n  const token = authUser ? JSON.parse(authUser).token : null;\r\n  const { isUserLogout } = useSelector((state) => ({\r\n    isUserLogout: state.User.isUserLogout,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    const handleLogout = async () => {\r\n      dispatch(logoutUser(token));\r\n      localStorage.clear();\r\n      sessionStorage.clear();\r\n    };\r\n\r\n    handleLogout();\r\n  }, [dispatch]);\r\n\r\n  if (isUserLogout) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  return <></>;\r\n};\r\n\r\n// Logout.propTypes = {\r\n//   history: PropTypes.object,\r\n// };\r\n\r\nexport default withRouter(Logout);\r\n\r\n// import PropTypes from \"prop-types\";\r\n// import React, { useEffect } from \"react\";\r\n// import { Navigate } from \"react-router-dom\";\r\n// import withRouter from \"../../Components/Hooks/withRouter\";\r\n// import { persistor } from \"../../store/store\";\r\n\r\n// import { logoutUser } from \"../../store/actions\";\r\n\r\n// //redux\r\n// import { useSelector, useDispatch } from \"react-redux\";\r\n\r\n// const Logout = (props) => {\r\n//   const dispatch = useDispatch();\r\n\r\n//   const { isUserLogout } = useSelector((state) => ({\r\n//     isUserLogout: state.User.isUserLogout,\r\n//   }));\r\n\r\n//   useEffect(() => {\r\n//     dispatch(logoutUser());\r\n//   }, [dispatch]);\r\n\r\n//   if (isUserLogout) {\r\n//     localStorage.removeItem('authUser');\r\n//     // persistor.pause();\r\n//     persistor.flush().then(() => {\r\n//       return persistor.purge();\r\n//     });\r\n//     return <Navigate to=\"/login\" />;\r\n//   }\r\n\r\n//   return <></>;\r\n// };\r\n\r\n// // Logout.propTypes = {\r\n// //   history: PropTypes.object,\r\n// // };\r\n\r\n// export default withRouter(Logout);\r\n"],"names":["withRouter","props","dispatch","useDispatch","authUser","localStorage","getItem","token","JSON","parse","isUserLogout","useSelector","state","User","useEffect","async","logoutUser","clear","sessionStorage","handleLogout","_jsx","Navigate","to","_Fragment"],"sourceRoot":""}