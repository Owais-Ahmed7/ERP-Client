{"version":3,"file":"static/js/1348.70bb8a6b.chunk.js","mappings":"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","sources":["Components/Common/BreadCrumb.js","pages/Report/Components/Hubspot/index.js","Components/constants/lead.js","pages/Lead/Form.js","Components/Common/Portal.js","pages/Lead/List.js","pages/Lead/SearchLead.js","pages/Lead/Merge.js","pages/Lead/UnMerge.js","pages/Lead/index.js","pages/Report/Components/Header.js"],"sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row } from \"reactstrap\";\r\n\r\nconst BreadCrumb = ({ title, pageTitle }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Row>\r\n        <Col xs={12}>\r\n          <div className=\"page-title-box p-3 d-flex flex-column flex-sm-row align-items-start align-items-sm-center justify-content-between gap-2\">\r\n            {/* Page Title */}\r\n            <h4 className=\"mb-2 mb-sm-0\">{title}</h4>\r\n\r\n            {/* Breadcrumbs */}\r\n            <div className=\"page-title-right\">\r\n              <ol className=\"breadcrumb m-0\">\r\n                <li className=\"breadcrumb-item\">\r\n                  <Link to=\"#\">{pageTitle}</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item active\">{title}</li>\r\n              </ol>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BreadCrumb;\r\n","import React, { useEffect, useState, useMemo, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  fetchHubspotContacts,\n  togglePatientForm,\n} from \"../../../../store/actions\";\nimport { capitalizeWords } from \"../../../../utils/toCapitalize\";\nimport { Button, Tooltip } from \"reactstrap\";\n\nconst statusBadge = {\n  Planned: \"bg-blue-100 text-blue-700 border-blue-300\",\n  Completed: \"bg-green-100 text-green-700 border-green-300\",\n  Missed: \"bg-red-100 text-red-700 border-red-300\",\n  Admitted: \"bg-emerald-100 text-emerald-700 border-emerald-300 font-bold\",\n};\n\nconst visitTypes = [\"First\", \"Follow-up\"];\nconst statusOptions = [\"Planned\", \"Missed\", \"Completed\"];\nconst agents = [\"Agent A\", \"Agent B\", \"Agent C\"];\n\nconst visitDateOptions = [\n  { label: \"All\", value: \"\" },\n  { label: \"Today Visits\", value: \"today\" },\n  { label: \"Tomorrow Visits\", value: \"tomorrow\" },\n  { label: \"Past Visits\", value: \"past\" },\n  { label: \"Future Visits\", value: \"future\" },\n  { label: \"Planned Visits\", value: \"planned\" },\n];\n\nconst LeadDashboard = ({ leadDate }) => {\n  const dispatch = useDispatch();\n  const {\n    contacts = [],\n    loading,\n    pagination = {},\n  } = useSelector((state) => state.HubspotContacts);\n\n  // UI state\n  const [filters, setFilters] = useState({\n    visitType: \"\",\n    status: \"\",\n    assignedTo: \"\",\n  });\n  const [visitDateFilter, setVisitDateFilter] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10);\n  const [tooltipOpen, setTooltipOpen] = useState(null);\n  const buttonRefs = useRef({});\n\n  // Fetch contacts when visitDateFilter, currentPage, or itemsPerPage changes\n  useEffect(() => {\n    const params = {\n      page: currentPage,\n      limit: itemsPerPage,\n      // leadDate: leadDate,\n      // visitDate: visitDateFilter,\n    };\n    if (visitDateFilter === \"planned\") {\n      params.status = \"Planned\";\n    } else {\n      params.visitDate = visitDateFilter;\n    }\n\n    console.log(params, \"params\");\n    dispatch(fetchHubspotContacts(params));\n  }, [visitDateFilter, currentPage, itemsPerPage, dispatch]);\n\n  // Reset tooltip state and cleanup refs when data changes or component unmounts\n  useEffect(() => {\n    // Reset tooltip state when data changes\n    setTooltipOpen(null);\n    // Clear refs to prevent stale references\n    buttonRefs.current = {};\n\n    // Cleanup function for unmount\n    return () => {\n      buttonRefs.current = {};\n      setTooltipOpen(null);\n    };\n  }, [contacts, currentPage, visitDateFilter]);\n\n  // Filtering (client-side for visitType, status, assignedTo)\n  const filteredContacts = useMemo(() => {\n    let filtered = contacts;\n    if (filters.visitType) {\n      filtered = filtered.filter((c) => c.visitType === filters.visitType);\n    }\n    if (filters.status) {\n      filtered = filtered.filter((c) => c.status === filters.status);\n    }\n    if (filters.assignedTo) {\n      filtered = filtered.filter((c) => c.assignedTo === filters.assignedTo);\n    }\n    return filtered;\n  }, [contacts, filters]);\n\n  console.log(filteredContacts, \"filteredContacts\");\n\n  // Pagination controls\n  const totalPages = pagination?.totalPages || 1;\n  const totalItems = pagination?.totalItems || 0;\n\n  return (\n    <div className=\"p-2 sm:p-6 max-w-7xl mx-auto\">\n      {/* Filters Bar */}\n      <div className=\"bg-white rounded-xl shadow flex flex-wrap items-center gap-2 px-4 py-3 mb-6 border border-gray-100\">\n        <div className=\"flex flex-wrap gap-2\">\n          {visitDateOptions.map((opt) => (\n            <button\n              key={opt.value}\n              className={`px-4 py-2 rounded-lg font-medium border transition-colors duration-150 text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 ${\n                visitDateFilter === opt.value\n                  ? \"bg-blue-600 text-gray-700 border-blue-600 shadow\"\n                  : \"bg-gray-50 text-gray-700 border-gray-300 hover:bg-blue-50\"\n              }`}\n              onClick={() => {\n                setVisitDateFilter(opt.value);\n                setCurrentPage(1);\n              }}\n            >\n              {opt.label}\n            </button>\n          ))}\n        </div>\n        <div className=\"flex-1\" />\n        {/* Future: Add more filters here if needed */}\n      </div>\n\n      {/* Table Card */}\n      <div className=\"bg-white rounded-xl shadow-lg border border-gray-100 overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50 sticky top-0 z-10\">\n            <tr>\n              <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider\">\n                Name\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider\">\n                Center\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider\">\n                Email\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider\">\n                Phone\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider\">\n                Gender\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider\">\n                Age\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider\">\n                Visit Date\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider\">\n                Amount\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider\">\n                Relation with pat\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider\">\n                Issues\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider\">\n                Comments\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider\">\n                Lead Status\n              </th>\n              {/* <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider\">\n                Contact Owner\n              </th> */}\n              <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider\">\n                Lifecycle Stage\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700 uppercase tracking-wider\"></th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-100\">\n            {loading ? (\n              <tr>\n                <td\n                  colSpan={7}\n                  className=\"text-center py-12 text-gray-400 text-lg font-medium\"\n                >\n                  Loading contacts...\n                </td>\n              </tr>\n            ) : filteredContacts.length === 0 ? (\n              <tr>\n                <td\n                  colSpan={7}\n                  className=\"text-center py-12 text-gray-400 text-lg font-medium\"\n                >\n                  No contacts found.\n                </td>\n              </tr>\n            ) : (\n              filteredContacts.map((contact, index) => (\n                <tr\n                  key={index}\n                  className={`transition-colors group ${\n                    contact.leadStatus === \"Admitted\"\n                      ? \"bg-emerald-50 hover:bg-emerald-100 border-l-4 border-emerald-500\"\n                      : \"hover:bg-blue-50\"\n                  }`}\n                >\n                  <td className=\"px-4 py-3 font-bold whitespace-nowrap font-semibold text-gray-900 flex items-center gap-2\">\n                    {capitalizeWords(\n                      `${contact.firstname || \"\"} ${contact.lastname || \"\"}`\n                    ) || \"N/A\"}\n                  </td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-gray-700\">\n                    {contact.center}\n                  </td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-gray-700\">\n                    {contact.email}\n                  </td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-gray-700\">\n                    {contact.phone}\n                  </td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-gray-700\">\n                    {contact.gender === \"Option 1\"\n                      ? \"Male\"\n                      : contact.gender === \"Option 2\"\n                      ? \"Female\"\n                      : \"Other\"}\n                  </td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-gray-700\">\n                    {contact.patient_age} Years\n                  </td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-gray-700\">\n                    {contact.visitDate}\n                  </td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-gray-700\">\n                    {contact.amount}\n                  </td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-gray-700\">\n                    {contact.relation_with_patient}\n                  </td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-gray-700\">\n                    {contact.issues}\n                  </td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-gray-700\">\n                    {contact.comments}\n                  </td>\n                  <td className=\"px-4 py-3 whitespace-nowrap\">\n                    <span\n                      className={`px-2 py-1 rounded-full border text-xs font-semibold ${\n                        statusBadge[contact.leadStatus] ||\n                        \"bg-gray-100 text-gray-700 border-gray-300\"\n                      }`}\n                    >\n                      {contact.leadStatus}\n                    </span>\n                  </td>\n                  {/* <td className=\"px-4 py-3 whitespace-nowrap text-gray-700\">\n                    {contact.contactOwner}\n                  </td> */}\n                  <td className=\"px-4 py-3 text-capitalize whitespace-nowrap text-gray-700\">\n                    {contact.lifecyclestage}\n                  </td>\n                  <td className=\"px-4 py-3 text-xs whitespace-nowrap text-gray-700\">\n                    <div>\n                      <Button\n                        ref={(el) => (buttonRefs.current[index] = el)}\n                        onClick={() =>\n                          dispatch(\n                            togglePatientForm({\n                              data: null,\n                              leadData: {\n                                leadOrigin: \"hubspot\",\n                                patient: {\n                                  name: `${contact.firstname} ${contact.lastname}`?.trim(),\n                                  phoneNumber: contact.phone,\n                                  email: contact.email,\n                                },\n                              },\n                              isOpen: true,\n                            })\n                          )\n                        }\n                        onMouseEnter={() => setTooltipOpen(index)}\n                        onMouseLeave={() => setTooltipOpen(null)}\n                      >\n                        <i className=\"ri-user-add-line align-bottom text-white text-muted me-2\"></i>{\" \"}\n                      </Button>\n                      {tooltipOpen === index && buttonRefs.current[index] && (\n                        <Tooltip\n                          isOpen={true}\n                          target={buttonRefs.current[index]}\n                          placement=\"top\"\n                          delay={{ show: 100, hide: 100 }}\n                        >\n                          Register this HubSpot contact as a new patient\n                        </Tooltip>\n                      )}\n                    </div>\n                  </td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Pagination Controls */}\n      <div className=\"flex flex-wrap items-center justify-between mt-8 gap-2 bg-white rounded-xl shadow border border-gray-100 px-4 py-3\">\n        <div className=\"text-sm text-gray-600\">\n          Showing{\" \"}\n          {filteredContacts.length === 0\n            ? 0\n            : (currentPage - 1) * itemsPerPage + 1}\n          -{Math.min(currentPage * itemsPerPage, pagination?.totalItems || 0)}{\" \"}\n          of {pagination?.totalItems || 0} contacts\n        </div>\n        <div className=\"flex gap-2 items-center\">\n          <button\n            className=\"px-3 py-1 rounded border border-gray-300 bg-white text-gray-700 hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-blue-400 disabled:opacity-50\"\n            onClick={() => setCurrentPage((p) => Math.max(1, p - 1))}\n            disabled={currentPage === 1}\n          >\n            Previous\n          </button>\n          <span className=\"px-2 py-1 text-gray-700 font-medium\">\n            Page {currentPage} of {totalPages || 1}\n          </span>\n          <button\n            className=\"px-3 py-1 rounded border border-gray-300 bg-white text-gray-700 hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-blue-400 disabled:opacity-50\"\n            onClick={() => setCurrentPage((p) => Math.min(totalPages, p + 1))}\n            disabled={currentPage === totalPages || totalPages === 0}\n          >\n            Next\n          </button>\n          <select\n            className=\"ml-2 border border-gray-300 rounded px-2 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-400\"\n            value={itemsPerPage}\n            onChange={(e) => {\n              setItemsPerPage(Number(e.target.value));\n              setCurrentPage(1);\n            }}\n          >\n            {[10, 20, 50, 100].map((size) => (\n              <option key={size} value={size}>\n                {size} / page\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LeadDashboard;\n","//if patient is registered then disable the patient name, phone number, date of birth field disabled\nconst leadFields = (isRegister = false) => [\n  {\n    label: \"Patient Name\",\n    name: \"patientName\",\n    type: \"text\",\n    disabled: isRegister,\n  },\n  {\n    label: \"Patient Phone Number\",\n    name: \"patientPhoneNumber\",\n    type: \"text\",\n    disabled: isRegister,\n  },\n  {\n    label: \"Patient Gender\",\n    name: \"patientGender\",\n    type: \"radio\",\n    options: [\"MALE\", \"FEMALE\", \"OTHERS\"],\n    disabled: false,\n  },\n  {\n    label: \"Patient Age\",\n    name: \"patientAge\",\n    type: \"number\",\n    disabled: isRegister,\n  },\n  {\n    label: \"Attended By\",\n    name: \"attendedBy\",\n    type: \"text\",\n    disabled: false,\n  },\n  {\n    label: \"Location\",\n    name: \"location\",\n    type: \"checkbox\",\n    disabled: false,\n  },\n  {\n    label: \"Inquiry Details\",\n    name: \"inquiry\",\n    type: \"text\",\n    disabled: false,\n  },\n  {\n    label: \"Visitor Name\",\n    name: \"visitorName\",\n    type: \"text\",\n    disabled: false,\n  },\n  {\n    label: \"Relation With Patient\",\n    name: \"relationWithPatient\",\n    type: \"text\",\n    disabled: false,\n  },\n  {\n    label: \"Charges\",\n    name: \"charges\",\n    type: \"text\",\n    disabled: false,\n  },\n  {\n    label: \"Reffered By\",\n    name: \"refferedBy\",\n    type: \"text\",\n    disabled: false,\n  },\n  {\n    label: \"Comment\",\n    name: \"comment\",\n    type: \"text\",\n    disabled: false,\n  },\n  {\n    label: \"Inquiry Type\",\n    name: \"inquiryType\",\n    type: \"text\",\n    disabled: false,\n  },\n  {\n    label: \"Given Updates\",\n    name: \"givenUpdates\",\n    type: \"text\",\n    disabled: false,\n  },\n  // {\n  //   label: \"Follow Up\",\n  //   name: \"followUp\",\n  //   type: \"text\",\n  //   disabled: false,\n  // },\n];\n\nexport { leadFields };\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Formik Validation\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport _ from \"lodash\";\n\n//flatpicker\nimport Flatpicker from \"react-flatpickr\";\nimport \"flatpickr/dist/themes/material_green.css\";\n\n//modal\nimport CustomModal from \"../../Components/Common/Modal\";\n\nimport { Button, Col, Form, FormFeedback, Input, Label, Row } from \"reactstrap\";\nimport { leadFields } from \"../../Components/constants/lead\";\n\n//redux\nimport { connect, useDispatch } from \"react-redux\";\nimport { addLead, createEditLead, updateLead } from \"../../store/actions\";\n\nconst LeadForm = ({ user, isOpen, lead, centers, centerAccess, date }) => {\n  const dispatch = useDispatch();\n  const [followUp, setFollowUp] = useState(\n    lead?.followUp?.length ? lead.followUp : []\n  );\n\n  useEffect(() => {\n    if (lead?.followUp?.length) {\n      setFollowUp(_.cloneDeep(lead.followUp));\n    }\n  }, [lead]);\n\n  //left fields = type of inquiry, updates given, follow up\n\n  const validation = useFormik({\n    // enableReinitialize : use this flag when initial values needs to be changed\n    enableReinitialize: true,\n\n    initialValues: {\n      author: user ? user._id : \"\",\n      patientName: lead ? lead.patient?.name : \"\",\n      patientPhoneNumber: lead ? lead.patient?.phoneNumber : \"\",\n      patientGender: lead ? lead.patient?.gender : \"\",\n      patientAge: lead ? lead.patient?.age : \"\",\n      attendedBy: lead ? lead.attendedBy : user ? user.name : \"\",\n      location: Array.isArray(lead?.location)\n        ? lead.location?.map((ld) => ld._id)\n        : [],\n      visitorName: lead ? lead.visitorName : \"\",\n      relationWithPatient: lead ? lead.relationWithPatient : \"\",\n      charges: lead ? lead.charges : \"\",\n      refferedBy: lead ? lead.refferedBy : \"\",\n      inquiry: lead ? lead.inquiry : \"\",\n      comment: lead ? lead.comment : \"\",\n      inquiryType: lead ? lead.inquiryType : \"\",\n      givenUpdates: lead ? lead.givenUpdates : \"\",\n      date: lead ? lead.date : \"\",\n    },\n    validationSchema: Yup.object({\n      patientName: Yup.string().required(\"Please Enter Patient Name\"),\n      patientPhoneNumber: Yup.string().required(\n        \"Please Enter Patient Phone Number\"\n      ),\n      patientGender: Yup.string().required(\"Please Select Patient Gender\"),\n      patientAge: Yup.number().required(\"Please Enter Patient Age\"),\n      attendedBy: Yup.string().required(\"Please Enter Attendend Name\"),\n      location: Yup.array().test(\n        \"notEmpty\",\n        \"Location is required\",\n        (value) => {\n          if (!value || value.length === 0) {\n            return false;\n          }\n          return true;\n        }\n      ),\n      inquiry: Yup.string().required(\"Please Enter Inquiry\"),\n      // inquiryType: Yup.string().required(\"Please Enter Inquiry Type\"),\n      // givenUpdates: Yup.string().required(\"Please Enter Given Updates\"),\n      // followUp: Yup.string().required(\"Please Enter Follow Up\"),\n      // comment: Yup.string().required(\"Please Enter Comment\"),\n      // date: Yup.string().required(\"Please Select Date\"),\n    }),\n    onSubmit: (values) => {\n      if (lead)\n        dispatch(\n          updateLead({\n            ...values,\n            followUp: followUp.filter((fl) => (fl.value ? true : false)),\n            id: lead._id,\n            centerAccess,\n            ...date,\n          })\n        );\n      else\n        dispatch(\n          addLead({\n            ...values,\n            followUp: followUp.filter((fl) => (fl.value ? true : false)),\n            centerAccess,\n            ...date,\n          })\n        );\n      closeForm();\n    },\n  });\n\n  const closeForm = () => {\n    validation.resetForm();\n    setFollowUp([]);\n    dispatch(createEditLead({ isOpen: false, data: null }));\n  };\n\n  return (\n    <React.Fragment>\n      <CustomModal centered isOpen={isOpen} size={\"xl\"} title={\"Add Lead\"}>\n        <div>\n          <Form\n            onSubmit={(e) => {\n              e.preventDefault();\n              validation.handleSubmit();\n              return false;\n            }}\n            action=\"#\"\n          >\n            <Row>\n              {(leadFields(lead?.isRegister) || []).map((field, i) => (\n                <Col key={i + field} xs={12} lg={6}>\n                  <div className=\"mb-3\">\n                    <Label htmlFor={field} className=\"form-label\">\n                      {field.label}\n                    </Label>\n                    {field.type === \"radio\" ? (\n                      <>\n                        <div className=\"d-flex flex-wrap\">\n                          {(field.options || []).map((item, idx) => (\n                            <React.Fragment key={item + idx}>\n                              <div\n                                key={item + idx}\n                                className=\"d-flex me-5 align-items-center\"\n                              >\n                                <Input\n                                  className=\"me-2 mt-0\"\n                                  type={field.type}\n                                  name={field.name}\n                                  value={item}\n                                  onChange={validation.handleChange}\n                                  checked={\n                                    validation.values[field.name] === item\n                                  }\n                                />\n                                <Label className=\"form-label fs-14 mb-0\">\n                                  {item}\n                                </Label>\n                              </div>\n                            </React.Fragment>\n                          ))}\n                          {validation.touched[field.name] &&\n                          validation.errors[field.name] ? (\n                            <FormFeedback type=\"invalid\" className=\"d-block\">\n                              {validation.errors[field.name]}\n                            </FormFeedback>\n                          ) : null}\n                        </div>\n                      </>\n                    ) : field.type === \"checkbox\" ? (\n                      <>\n                        <div className=\"d-flex flex-wrap\">\n                          {(centers || []).map((item, idx) => (\n                            <>\n                              <div\n                                key={item[field.value]}\n                                className=\"d-flex me-5 align-items-center\"\n                              >\n                                <Input\n                                  className=\"me-2 mt-0\"\n                                  type={field.type}\n                                  name={field.name}\n                                  value={item?._id}\n                                  onChange={validation.handleChange}\n                                  checked={validation.values[\n                                    field.name\n                                  ]?.includes(item?._id)}\n                                />\n                                <Label className=\"form-label fs-9 mb-0\">\n                                  {item.title || item.label}\n                                </Label>\n                              </div>\n                            </>\n                          ))}\n                          {validation.touched[field.name] &&\n                          validation.errors[field.name] ? (\n                            <FormFeedback type=\"invalid\" className=\"d-block\">\n                              {validation.errors[field.name]}\n                            </FormFeedback>\n                          ) : null}\n                        </div>\n                      </>\n                    ) : (\n                      <>\n                        <Input\n                          name={field.name}\n                          className=\"form-control\"\n                          placeholder={`Enter ${field.label}`}\n                          type={field.type}\n                          disabled={field.disabled}\n                          onChange={validation.handleChange}\n                          onBlur={validation.handleBlur}\n                          value={validation.values[field.name] || \"\"}\n                          invalid={\n                            validation.touched[field.name] &&\n                            validation.errors[field.name]\n                              ? true\n                              : false\n                          }\n                        />\n                        {validation.touched[field.name] &&\n                        validation.errors[field.name] ? (\n                          <FormFeedback type=\"invalid\">\n                            {validation.errors[field.name]}\n                          </FormFeedback>\n                        ) : null}\n                      </>\n                    )}\n                  </div>\n                </Col>\n              ))}\n              <Col xs={12} lg={6}>\n                <div className=\"mb-3\">\n                  <Label htmlFor=\"date\" className=\"form-label\">\n                    Date\n                  </Label>\n                  <Flatpicker\n                    name=\"date\"\n                    value={validation.values.date || new Date()}\n                    onChange={([e]) => {\n                      const event = { target: { value: e, name: \"date\" } };\n                      validation.handleChange(event);\n                    }}\n                    options={{\n                      dateFormat: \"d M Y G:i:S K\",\n                      enableTime: true,\n                      time_24hr: false,\n                      disableMobile: true,\n                    }}\n                    className=\"form-control shadow-none bg-light\"\n                    id=\"date\"\n                  />\n                  {validation.touched.date && validation.errors.date ? (\n                    <FormFeedback className=\"d-block\" type=\"invalid\">\n                      {validation.errors.date}\n                    </FormFeedback>\n                  ) : null}\n                </div>\n              </Col>\n              <Col xs={12}>\n                <div>\n                  <Label>Follow Up</Label>\n                  <div className=\"\">\n                    {(followUp || []).map((fl, idx) => (\n                      <div className=\"d-flex gap-3 align-items-center mb-3\">\n                        <Input\n                          className=\"w-50\"\n                          key={idx}\n                          type=\"textarea\"\n                          placeholder={`Follow up ${idx + 1}`}\n                          onChange={(e) => {\n                            let fls = [...followUp];\n                            fls[idx].value = e.target.value;\n                            setFollowUp(fls);\n                          }}\n                          value={fl.value}\n                        />\n                        <Button\n                          type=\"button\"\n                          onClick={() => {\n                            let fls = [...followUp];\n                            fls = fls.filter((fl, id) => id !== idx);\n                            setFollowUp(fls);\n                          }}\n                          size=\"sm\"\n                          color=\"danger\"\n                          outline\n                        >\n                          <i className=\"ri-close-circle-line fs-6\"></i>\n                        </Button>\n                      </div>\n                    ))}\n                    <button\n                      type=\"button\"\n                      onClick={() => setFollowUp([...followUp, { value: \"\" }])}\n                      className=\"btn btn-sm btn-secondary\"\n                    >\n                      Add\n                    </button>\n                  </div>\n                </div>\n              </Col>\n              <Col xs={12}>\n                <div className=\"d-flex align-items-center justify-content-end gap-3\">\n                  <Button type=\"submit\" size=\"sm\" color=\"primary\" outline>\n                    Save\n                  </Button>\n                  <Button onClick={closeForm} size=\"sm\" color=\"danger\">\n                    Cancel\n                  </Button>\n                </div>\n              </Col>\n            </Row>\n          </Form>\n        </div>\n      </CustomModal>\n    </React.Fragment>\n  );\n};\n\nLeadForm.propTypes = {\n  user: PropTypes.object.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  lead: PropTypes.object,\n  centers: PropTypes.array,\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.User.user,\n  isOpen: state.Lead.createEditLead?.isOpen,\n  lead: state.Lead.createEditLead?.data,\n  centers: state.Center.allCenters,\n  centerAccess: state.User.centerAccess,\n});\n\nexport default connect(mapStateToProps)(LeadForm);\n","import { useEffect, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst Portal = ({ children, node }) => {\n  const defaultNodeRef = useRef();\n\n  useEffect(() => {\n    const { current: defaultNode } = defaultNodeRef;\n\n    if (document && !node && !defaultNode) {\n      defaultNodeRef.current = document.createElement(\"div\");\n      document.body.appendChild(defaultNodeRef.current);\n    }\n\n    return () => {\n      if (defaultNode) {\n        document.body.removeChild(defaultNode);\n      }\n    };\n  }, [node]);\n\n  const targetNode = node || defaultNodeRef.current;\n\n  if (!targetNode) {\n    return null;\n  }\n\n  return ReactDOM.createPortal(children, targetNode);\n};\n\nexport default Portal;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Col,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Row,\n  UncontrolledButtonDropdown,\n  UncontrolledTooltip,\n} from \"reactstrap\";\nimport Highlighter from \"react-highlight-words\";\nimport { differenceInYears, format } from \"date-fns\";\nimport { createEditLead, togglePatientForm } from \"../../store/actions\";\nimport { useDispatch } from \"react-redux\";\nimport RenderWhen from \"../../Components/Common/RenderWhen\";\nimport Portal from \"../../Components/Common/Portal\";\n\nconst List = ({\n  leads,\n  leadQuery,\n  setDeleteLead,\n  setMergeLead,\n  setUnMergeLead,\n}) => {\n  const dispatch = useDispatch();\n\n  return (\n    <React.Fragment>\n      <div className=\"overflow-scroll\">\n        <Row\n          className=\"mt-3 py-2 row-gap-2 lead-table  dropdown-portal\" // overflow-scroll\n          // style={{ width: \"1000px\" }}\n        >\n          <Col className=\"display-6 fs-13 font-semi-bold\" xs={1}>\n            Patient Name\n          </Col>\n          <Col className=\"display-6 fs-13 font-semi-bold\" xs={1}>\n            Date\n          </Col>\n          <Col className=\"display-6 fs-13 font-semi-bold\" xs={1}>\n            Patient Number\n          </Col>\n          <Col className=\"display-6 fs-13 font-semi-bold\" xs={1}>\n            Patient Age\n          </Col>\n          <Col className=\"display-6 fs-13 font-semi-bold\" xs={1}>\n            Patient Gender\n          </Col>\n          <Col className=\"display-6 fs-13 font-semi-bold\" xs={1}>\n            Attended By\n          </Col>\n          <Col className=\"display-6 fs-13 font-semi-bold\" xs={1}>\n            Location\n          </Col>\n          <Col className=\"display-6 fs-13 font-semi-bold\" xs={1}>\n            Visitor Name\n          </Col>\n          <Col className=\"display-6 fs-13 font-semi-bold\" xs={1}>\n            Reffered By\n          </Col>\n          <Col className=\"display-6 fs-13 font-semi-bold\" xs={1}>\n            Inquiry details\n          </Col>\n          <Col className=\"display-6 fs-13 font-semi-bold\" xs={1}>\n            Follow Up\n          </Col>\n          <Col className=\"display-6 fs-13 font-semi-bold\" xs={1}></Col>\n\n          {(leads || []).map((leadGroup) => (\n            <Col\n              className=\"bg-white py-3 overflow-auto\"\n              // style={{ width: \"1000px\" }}\n              xs={12}\n              key={leadGroup._id}\n            >\n              {/* <div className=\"text-center\">\n                  <h6 className=\"display-6 fs-6\">\n                    Grouped By: {leadGroup._id}\n                  </h6>\n                  <div className=\"d-flex align-items-center gap-4 mb-2 justify-content-center\">\n                    <div>\n                      <span className=\"text-primary fs-14 font-semi-bold\">\n                        Patient Name:{\" \"}\n                      </span>\n                      {leadGroup.patientName}\n                    </div>\n                    <div>\n                      <span className=\"text-primary fs-14 font-semi-bold\">\n                        Patient Phone Number:{\" \"}\n                      </span>\n                      {leadGroup._id}\n                    </div>\n                  </div>\n                </div> */}\n              <Row className=\"p-0\">\n                {\" \"}\n                {/* lead-table */}\n                {(leadGroup.leads || []).map((lead, idx) => (\n                  <React.Fragment key={lead._id}>\n                    <Col\n                      className=\"d-flex align-items-center border border-top-2 border-bottom-2 p-1\"\n                      xs={1}\n                    >\n                      <span className=\"text-primary fs-15 me-2\">\n                        {idx + 1}:\n                      </span>\n                      {\"  \"}\n                      <h6\n                        id={`lead-${lead._id}`}\n                        className={\n                          lead.isRegister ? \"text-success fs-6 mb-0\" : \"mb-0\"\n                        }\n                      >\n                        <Highlighter\n                          // highlightClassName=\"bg-warning\"\n                          searchWords={[leadQuery]}\n                          autoEscape={true}\n                          textToHighlight={lead.patient.name}\n                        />\n                      </h6>\n                      <RenderWhen isTrue={lead.isRegister}>\n                        <UncontrolledTooltip target={`lead-${lead._id}`}>\n                          Registered Patient\n                        </UncontrolledTooltip>\n                      </RenderWhen>\n                    </Col>\n                    <Col\n                      className=\"border border-top-2 border-bottom-2 p-1\"\n                      xs={1}\n                    >\n                      <Highlighter\n                        searchWords={[leadQuery]}\n                        autoEscape={true}\n                        textToHighlight={\n                          lead.date\n                            ? format(new Date(lead.date), \"dd/MM/yyyy hh:mm a\")\n                            : \"\"\n                        }\n                      />\n                    </Col>\n                    <Col\n                      className=\"border border-top-2 border-bottom-2 p-1\"\n                      xs={1}\n                    >\n                      <Highlighter\n                        // highlightClassName=\"bg-warning\"\n                        searchWords={[leadQuery]}\n                        autoEscape={true}\n                        textToHighlight={lead.patient.phoneNumber}\n                      />\n                    </Col>\n                    <Col\n                      className=\"border border-top-2 border-bottom-2 p-1\"\n                      xs={1}\n                    >\n                      <Highlighter\n                        // highlightClassName=\"bg-warning\"\n                        searchWords={[leadQuery]}\n                        autoEscape={true}\n                        textToHighlight={`${lead.patient.age} years`}\n                      />\n                    </Col>\n                    <Col\n                      className=\"border border-top-2 border-bottom-2 p-1\"\n                      xs={1}\n                    >\n                      <Highlighter\n                        // highlightClassName=\"bg-warning\"\n                        searchWords={[leadQuery]}\n                        autoEscape={true}\n                        textToHighlight={lead.patient.gender}\n                      />\n                    </Col>\n                    <Col\n                      className=\"border border-top-2 border-bottom-2 p-1\"\n                      xs={1}\n                    >\n                      <Highlighter\n                        // highlightClassName=\"bg-warning\"\n                        searchWords={[leadQuery]}\n                        autoEscape={true}\n                        textToHighlight={lead.attendedBy}\n                      />\n                    </Col>\n                    <Col\n                      className=\"border border-top-2 border-bottom-2 p-1\"\n                      xs={1}\n                    >\n                      <Highlighter\n                        // highlightClassName=\"bg-warning\"\n                        searchWords={[leadQuery]}\n                        autoEscape={true}\n                        textToHighlight={\n                          Array.isArray(lead.location)\n                            ? lead.location\n                                .map((item) => item.title)\n                                .join(\", \\n\")\n                            : lead.location\n                        }\n                      />\n                    </Col>\n                    <Col\n                      className=\"border border-top-2 border-bottom-2 p-1\"\n                      xs={1}\n                    >\n                      <Highlighter\n                        // highlightClassName=\"bg-warning\"\n                        searchWords={[leadQuery]}\n                        autoEscape={true}\n                        textToHighlight={lead.visitorName}\n                      />\n                    </Col>\n                    <Col\n                      className=\"border border-top-2 border-bottom-2 p-1\"\n                      xs={1}\n                    >\n                      <Highlighter\n                        // highlightClassName=\"bg-warning\"\n                        searchWords={[leadQuery]}\n                        autoEscape={true}\n                        textToHighlight={lead.refferedBy}\n                      />\n                    </Col>\n                    <Col\n                      className=\"border border-top-2 border-bottom-2 p-1\"\n                      xs={1}\n                    >\n                      <Highlighter\n                        // highlightClassName=\"bg-warning\"\n                        searchWords={[leadQuery]}\n                        autoEscape={true}\n                        textToHighlight={lead.inquiry}\n                      />\n                    </Col>\n                    <Col\n                      className=\"border border-top-2 border-bottom-2 p-1\"\n                      xs={1}\n                    >\n                      {(lead.followUp || []).map((fl, id) => (\n                        <div key={id}>{fl.value}</div>\n                      ))}\n                      {/* <Highlighter\n                      // highlightClassName=\"bg-warning\"\n                      searchWords={[leadQuery]}\n                      autoEscape={true}\n                      textToHighlight={lead.inquiry}\n                    /> */}\n                    </Col>\n                    <Col\n                      className=\"border border-top-2 text-center border-bottom-2 p-1\"\n                      xs={1}\n                    >\n                      <UncontrolledButtonDropdown\n                      // isOpen={settings_Menu}\n                      // toggle={toggleSettings}\n                      >\n                        <DropdownToggle\n                          className=\"btn btn-ghost-secondary btn-icon\"\n                          tag=\"button\"\n                        >\n                          <i className=\"bx bx-dots-vertical-rounded fs-4\"></i>\n                          {/* <FeatherIcon icon=\"more-vertical\" className=\"icon-sm\" /> */}\n                        </DropdownToggle>\n                        <Portal\n                          node={document.querySelector(\".dropdown-portal\")}\n                        >\n                          <DropdownMenu style={{ width: \"200px\" }}>\n                            <DropdownItem\n                              href=\"#\"\n                              className=\"d-block user-profile-show\"\n                              disabled={lead.isRegister}\n                              onClick={() => setUnMergeLead(lead)}\n                            >\n                              <i className=\"ri-git-branch-fill align-bottom text-muted me-2\"></i>{\" \"}\n                              Un Merge\n                            </DropdownItem>\n                            <DropdownItem\n                              href=\"#\"\n                              className=\"d-block user-profile-show\"\n                              disabled={lead.isRegister}\n                              onClick={() => setMergeLead(lead)}\n                            >\n                              <i className=\"ri-git-merge-fill align-bottom text-muted me-2\"></i>{\" \"}\n                              Merge\n                            </DropdownItem>\n                            <DropdownItem\n                              href=\"#\"\n                              className=\"d-block user-profile-show\"\n                              disabled={lead.isRegister}\n                              onClick={() =>\n                                dispatch(\n                                  togglePatientForm({\n                                    data: null,\n                                    leadData: {\n                                      ...lead,\n                                      leadOrigin: \"generic\",\n                                    },\n                                    isOpen: true,\n                                  })\n                                )\n                              }\n                            >\n                              <i className=\"ri-user-2-fill align-bottom text-muted me-2\"></i>{\" \"}\n                              Register Patient\n                            </DropdownItem>\n                            <DropdownItem\n                              href=\"#\"\n                              className=\"d-block user-profile-show\"\n                              onClick={() =>\n                                dispatch(\n                                  createEditLead({ data: lead, isOpen: true })\n                                )\n                              }\n                            >\n                              <i className=\"ri-quill-pen-line align-bottom text-muted me-2\"></i>{\" \"}\n                              Edit\n                            </DropdownItem>\n                            <DropdownItem\n                              href=\"#\"\n                              disabled={lead.isRegister}\n                              onClick={() =>\n                                setDeleteLead({ id: lead._id, isOpen: true })\n                              }\n                            >\n                              {\" \"}\n                              <i className=\"ri-delete-bin-5-line align-bottom text-muted me-2\"></i>{\" \"}\n                              Delete\n                            </DropdownItem>\n                          </DropdownMenu>\n                        </Portal>\n                      </UncontrolledButtonDropdown>\n                      {/* <Button size=\"sm\" outline></Button> */}\n                    </Col>\n                    {/* <Col xs={2}>{lead.}</Col> */}\n                  </React.Fragment>\n                ))}\n              </Row>\n            </Col>\n          ))}\n        </Row>\n      </div>\n    </React.Fragment>\n  );\n};\n\nList.propTypes = {\n  leads: PropTypes.array,\n  leadQuery: PropTypes.string,\n  setDeleteLead: PropTypes.func,\n};\n\nexport default List;\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  DropdownToggle,\n  Input,\n  Label,\n  Spinner,\n  UncontrolledDropdown,\n} from \"reactstrap\";\nimport RenderWhen from \"../../Components/Common/RenderWhen\";\n\nimport { connect, useDispatch } from \"react-redux\";\nimport { searchLead } from \"../../store/actions\";\n\nconst SearchLead = ({\n  leads,\n  searchLoading,\n  setMergeWith,\n  centerAccess,\n  date,\n}) => {\n  const dispatch = useDispatch();\n  const [leadQuery, setLeadQuery] = useState(\"\");\n\n  useEffect(() => {\n    if (leadQuery?.length > 1)\n      dispatch(\n        searchLead({\n          leadQuery,\n          centerAccess: JSON.stringify(centerAccess),\n          grouped: false,\n          // ...date,\n        })\n      );\n  }, [dispatch, leadQuery, centerAccess, date]);\n\n  const handleChange = (e) => {\n    const val = e.target.value;\n    setLeadQuery(val);\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        {\" \"}\n        <UncontrolledDropdown direction=\"down\">\n          <Label className=\"d-block text-dark fw-heavy\">Search Lead</Label>\n          <DropdownToggle className=\"p-0 position-relative w-200\" color=\"light\">\n            <Input\n              value={leadQuery}\n              onChange={handleChange}\n              size={\"sm\"}\n              className=\"w-100\"\n            />\n            {/* add custom medicine */}\n            <RenderWhen isTrue={searchLoading}>\n              <span\n                className=\"link-success dropdown-input-icon\"\n                style={{ right: \"50px\" }}\n              >\n                <Spinner size={\"sm\"} color=\"success\" />\n              </span>\n            </RenderWhen>\n          </DropdownToggle>\n          {/* <DropdownMenu className=\"dropdown-menu-md overflow-auto dropdown-height-md\">\n            <DropdownItem></DropdownItem>\n            {(leads || []).map((item) => (\n              <DropdownItem\n                className=\"d-flex align-items-center link-primary text-primary fs-6\"\n                key={item[\"_id\"]}\n                onClick={() => {\n                  setMergeWith(item);\n                }}\n              >\n                <span>{item.patient?.name}</span>\n              </DropdownItem>\n            ))}\n          </DropdownMenu> */}\n        </UncontrolledDropdown>\n      </div>\n    </React.Fragment>\n  );\n};\n\nSearchLead.propTypes = {\n  leads: PropTypes.array,\n};\n\nconst mapStateToProps = (state) => ({\n  leads: state.Lead.unGroupLeads,\n  searchLoading: state.Lead.searchLoading,\n  centerAccess: state.User.centerAccess,\n});\n\nexport default connect(mapStateToProps)(SearchLead);\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport CustomModal from \"../../Components/Common/Modal\";\nimport SearchLead from \"./SearchLead\";\nimport DataTable from \"react-data-table-component\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { Button } from \"reactstrap\";\nimport { mergeLead, setUngroupLeads } from \"../../store/actions\";\nimport Divider from \"../../Components/Common/Divider\";\nimport RenderWhen from \"../../Components/Common/RenderWhen\";\n\nconst Merge = ({ lead, setLead, leads, centerAccess, date }) => {\n  const dispatch = useDispatch();\n  const [mergeWith, setMergeWith] = useState();\n\n  const columns = [\n    {\n      name: \"Patient Name\",\n      selector: (row) => row.patient?.name,\n    },\n    {\n      name: \"Patient Number\",\n      selector: (row) => row.patient?.phoneNumber,\n    },\n    {\n      name: \"Attended By\",\n      selector: (row) => row.attendedBy,\n    },\n    {\n      name: \"Location\",\n      selector: (row) =>\n        Array.isArray(row.location)\n          ? row.location.map((item) => item.title).join(\", \\n\")\n          : row.location,\n    },\n    {\n      name: \"Inquiry Details\",\n      selector: (row) => row.inquiry,\n    },\n    {\n      name: \"\",\n      selector: (row) => (\n        <Button\n          onClick={() => {\n            setMergeWith(row);\n            dispatch(setUngroupLeads({ payload: [] }));\n          }}\n          size=\"sm\"\n          color=\"success\"\n        >\n          <i className=\"ri-check-line fs-5\"></i>\n        </Button>\n      ),\n    },\n  ];\n\n  const mergeLeadcolumns = [\n    {\n      name: \"Patient Name\",\n      selector: (row) => row.patient?.name,\n    },\n    {\n      name: \"Patient Number\",\n      selector: (row) => row.patient?.phoneNumber,\n    },\n    {\n      name: \"Attended By\",\n      selector: (row) => row.attendedBy,\n    },\n    {\n      name: \"Location\",\n      selector: (row) =>\n        Array.isArray(row.location)\n          ? row.location.map((item) => item.title).join(\", \\n\")\n          : row.location,\n    },\n    {\n      name: \"Inquiry Details\",\n      selector: (row) => row.inquiry,\n    },\n  ];\n\n  // const documents = () => {\n  //   let lds = [];\n  //   (leads || []).forEach((lead) => {\n  //     lead.leads?.forEach((val) => {\n  //       lds.push({ id: val._id, ...val });\n  //     });\n  //   });\n  //   return lds;\n  // };\n\n  const toggle = () => {\n    setLead(null);\n    setMergeWith(null);\n  };\n\n  const merge = () => {\n    dispatch(\n      mergeLead({ lead, mergeWithLead: mergeWith, centerAccess, ...date })\n    );\n    setLead(null);\n    setMergeWith(null);\n  };\n\n  return (\n    <React.Fragment>\n      <CustomModal\n        size={\"lg\"}\n        title={\"Merge Lead\"}\n        isOpen={Boolean(lead)}\n        toggle={toggle}\n      >\n        <SearchLead setMergeWith={setMergeWith} />\n        <div className=\"overflow-auto\">\n          <DataTable\n            style={{ height: \"500px !important\", backgroundColor: \"#1d1d1d\" }}\n            fixedHeader\n            columns={columns}\n            data={leads || []}\n            highlightOnHover\n          />\n        </div>\n        <Divider />\n        <RenderWhen isTrue={Boolean(mergeWith)}>\n          <h5 className=\"dispaly-5\">\n            Merge <span className=\"text-success\">-{lead?.patient?.name}-</span>{\" \"}\n            With\n          </h5>\n          <DataTable\n            fixedHeader\n            columns={mergeLeadcolumns}\n            data={[mergeWith] || []}\n            highlightOnHover\n          />\n          <div className=\"text-end mt-4\">\n            <Button\n              onClick={merge}\n              size=\"sm\"\n              color=\"primary\"\n              className=\"text-white\"\n            >\n              Merge\n            </Button>\n          </div>\n        </RenderWhen>\n      </CustomModal>\n    </React.Fragment>\n  );\n};\n\nMerge.propTypes = {};\n\nconst mapStateToProps = (state) => ({\n  leads: state.Lead.unGroupLeads,\n  searchLoading: state.Lead.searchLoading,\n  centerAccess: state.User.centerAccess,\n});\n\nexport default connect(mapStateToProps)(Merge);\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport CustomModal from \"../../Components/Common/Modal\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { unMergeLead } from \"../../store/actions\";\n\nconst UnMerge = ({ lead, setUnMergeLead, centerAccess, date }) => {\n  const dispatch = useDispatch();\n\n  const toggle = () => {\n    setUnMergeLead(null);\n  };\n\n  const unMerge = () => {\n    dispatch(unMergeLead({ lead, centerAccess, ...date }));\n    toggle();\n  };\n\n  return (\n    <React.Fragment>\n      <CustomModal\n        size={\"md\"}\n        centered\n        title={\"Unmerge Lead\"}\n        isOpen={Boolean(lead)}\n        toggle={toggle}\n      >\n        <div className=\"mt-2 text-center\">\n          {/* <lord-icon\n            src=\"https://cdn.lordicon.com/gsqxdxog.json\"\n            trigger=\"loop\"\n            colors=\"primary:#405189,secondary:#f06548\"\n            style={{ width: \"100px\", height: \"100px\" }}\n          ></lord-icon> */}\n          <div className=\"mt-4 pt-2 fs-15 mx-4 mx-sm-5\">\n            <h4>Are you sure ?</h4>\n            <p className=\"text-muted mx-4 mb-0\">\n              Are you sure you want to Un merge this record ?\n            </p>\n          </div>\n        </div>\n        <div className=\"d-flex gap-2 justify-content-center mt-4 mb-2\">\n          <button\n            type=\"button\"\n            className=\"btn w-sm btn-light\"\n            data-bs-dismiss=\"modal\"\n            onClick={toggle}\n          >\n            Close\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn w-sm btn-danger text-white\"\n            id=\"delete-record\"\n            onClick={unMerge}\n          >\n            Yes, Unmerge It!\n          </button>\n        </div>\n      </CustomModal>\n    </React.Fragment>\n  );\n};\n\nUnMerge.propTypes = {};\n\nconst mapStateToProps = (state) => ({\n  centerAccess: state.User.centerAccess,\n});\n\nexport default connect(mapStateToProps)(UnMerge);\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  Col,\n  Container,\n  Input,\n  Row,\n  Spinner,\n  Nav,\n  NavItem,\n  NavLink,\n  TabContent,\n  TabPane,\n} from \"reactstrap\";\nimport BreadCrumb from \"../../Components/Common/BreadCrumb\";\nimport RenderWhen from \"../../Components/Common/RenderWhen\";\nimport Header from \"../Report/Components/Header\";\n\n//redux\nimport { connect, useDispatch } from \"react-redux\";\nimport {\n  createEditLead,\n  fetchAllCenters,\n  fetchCenters,\n  removeLead,\n  searchLead,\n} from \"../../store/actions\";\n\n//components\nimport PatientForm from \"../../Components/Patient/AddPatient\";\nimport LeadForm from \"./Form\";\nimport LeadList from \"./List\";\nimport DeleteModal from \"../../Components/Common/DeleteModal\";\nimport { CSVLink } from \"react-csv\";\nimport { endOfDay, format, startOfDay } from \"date-fns\";\nimport Merge from \"./Merge\";\nimport UnMerge from \"./UnMerge\";\nimport LeadDashboard from \"../Report/Components/Hubspot\";\n\nconst Lead = ({ searchLoading, leads, centerAccess, user }) => {\n  const dispatch = useDispatch();\n\n  const [date, setDate] = useState({\n    start: startOfDay(new Date()),\n    end: endOfDay(new Date()),\n  });\n  const [mergeLead, setMergeLead] = useState();\n  const [unMergeLead, setUnMergeLead] = useState();\n  const [leadQuery, setLeadQuery] = useState(\"\");\n  const [deleteLead, setDeleteLead] = useState({\n    id: null,\n    isOpen: false,\n  });\n  const [activeTab, setActiveTab] = useState(\"1\");\n\n  useEffect(() => {\n    dispatch(\n      searchLead({\n        leadQuery,\n        grouped: true,\n        centerAccess: JSON.stringify(centerAccess),\n        ...date,\n      })\n    );\n  }, [dispatch, leadQuery, centerAccess, date]);\n\n  useEffect(() => {\n    dispatch(fetchAllCenters());\n  }, [dispatch]);\n\n  useEffect(() => {\n    console.log(user, \"user\");\n    dispatch(fetchCenters(user?.centerAccess));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, user?.centerAccess]);\n\n  //delete lead\n  const onCloseClick = () => {\n    setDeleteLead({ id: null, isOpen: false });\n  };\n\n  const onDeleteClick = () => {\n    dispatch(removeLead(deleteLead?.id));\n    onCloseClick();\n  };\n\n  const headers = [\n    { label: \"Date\", key: \"date\" },\n    { label: \"Patient Name\", key: \"patient.name\" },\n    { label: \"Patient Phone Number\", key: \"patient.phoneNumber\" },\n    { label: \"Patient Age\", key: \"patient.age\" },\n    { label: \"Attended By\", key: \"attendedBy\" },\n    { label: \"Location\", key: \"location\" },\n    { label: \"Referred By\", key: \"refferedBy\" },\n    { label: \"Inquiry Details\", key: \"inquiry\" },\n    { label: \"Comment\", key: \"comment\" },\n    { label: \"Inquiry Type\", key: \"inquiryType\" },\n    { label: \"Given Updates\", key: \"givenUpdates\" },\n    { label: \"Follow up\", key: \"followUp\" },\n    { label: \"Registered\", key: \"isRegister\" },\n  ];\n\n  const documents = () => {\n    let lds = [];\n    (leads || []).forEach((lead) => {\n      lead.leads?.forEach((val) => {\n        lds.push({\n          ...val,\n          date: format(new Date(val.date), \"dd MMM yyyy hh:mm a\"),\n          followUp:\n            val.followUp?.length > 0\n              ? val.followUp.map((vl) => vl.value).join(\", \\n\")\n              : \"\",\n          location:\n            val.location?.length > 0\n              ? val.location.map((vl) => vl.title).join(\", \\n\")\n              : \"\",\n        });\n      });\n    });\n    return lds;\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"page-content\">\n        <Container fluid>\n          <BreadCrumb title=\"Leads\" pageTitle=\"Leads\" />\n\n          {/* Tab Navigation */}\n          <Card className=\"mb-0\">\n            <CardBody className=\"bg-white p-0\">\n              <Nav tabs className=\"nav-tabs-custom\">\n                <NavItem>\n                  <NavLink\n                    className={activeTab === \"1\" ? \"active\" : \"\"}\n                    onClick={() => setActiveTab(\"1\")}\n                    style={{ cursor: \"pointer\" }}\n                  >\n                    <i className=\"ri-user-line me-1 align-bottom\"></i>\n                    General Leads\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={activeTab === \"2\" ? \"active\" : \"\"}\n                    onClick={() => setActiveTab(\"2\")}\n                    style={{ cursor: \"pointer\" }}\n                  >\n                    <i className=\"ri-hubspot-line me-1 align-bottom\"></i>\n                    HubSpot Contacts\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </CardBody>\n          </Card>\n\n          {/* Tab Content */}\n          <TabContent activeTab={activeTab}>\n            <TabPane tabId=\"1\">\n              <Card className=\"mb-0\">\n                <CardBody className=\"bg-white\">\n                  <Row className=\"g-2\">\n                    <Col sm={4}>\n                      <div className=\"search-box\">\n                        <Input\n                          type=\"text\"\n                          value={leadQuery}\n                          onChange={\n                            (e) => setLeadQuery(e.target.value)\n                            // dispatch(searchLead({ phoneNumber: e.target.value }))\n                          }\n                          className=\"form-control\"\n                          placeholder=\"Search for title, address\"\n                        />\n                        <i className=\"ri-search-line search-icon\"></i>\n                        <RenderWhen isTrue={searchLoading}>\n                          <Spinner\n                            className=\"position-absolute\"\n                            style={{ right: 10, top: 10 }}\n                            color=\"success\"\n                            size={\"sm\"}\n                          />\n                        </RenderWhen>\n                      </div>\n                    </Col>\n                    <Col className=\"col-sm-auto ms-auto d-flex gap-3\">\n                      <Header reportDate={date} setReportDate={setDate} />\n                      <div className=\"list-grid-nav hstack gap-1\">\n                        <Button\n                          color=\"success\"\n                          onClick={() =>\n                            dispatch(\n                              createEditLead({ isOpen: true, data: null })\n                            )\n                          }\n                        >\n                          <i className=\"ri-add-fill me-1 align-bottom\"></i> Add\n                          New Lead\n                        </Button>\n                      </div>\n\n                      <div className=\"list-grid-nav hstack gap-1\">\n                        <CSVLink\n                          data={documents() || []}\n                          title=\"CSV Download\"\n                          filename={\"leads.csv\"}\n                          headers={headers}\n                          className=\"btn btn-info px-2 ms-3\"\n                        >\n                          <i className=\"ri-file-paper-2-line text-light text-decoration-none\"></i>\n                        </CSVLink>\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n              </Card>\n              <LeadList\n                leads={leads}\n                leadQuery={leadQuery}\n                setDeleteLead={setDeleteLead}\n                setMergeLead={setMergeLead}\n                setUnMergeLead={setUnMergeLead}\n              />\n            </TabPane>\n            <TabPane tabId=\"2\">\n              <LeadDashboard leadDate={date} />\n            </TabPane>\n          </TabContent>\n\n          {/* Create Edit Lead */}\n          <PatientForm />\n          <LeadForm date={date} />\n          <Merge date={date} lead={mergeLead} setLead={setMergeLead} />\n          <UnMerge\n            date={date}\n            lead={unMergeLead}\n            setUnMergeLead={setUnMergeLead}\n          />\n          <DeleteModal\n            show={deleteLead?.isOpen}\n            onCloseClick={onCloseClick}\n            onDeleteClick={onDeleteClick}\n          />\n        </Container>\n      </div>\n    </React.Fragment>\n  );\n};\n\nLead.propTypes = {\n  leads: PropTypes.array,\n  searchLoading: PropTypes.bool,\n};\n\nconst mapStateToProps = (state) => ({\n  leads: state.Lead.data,\n  searchLoading: state.Lead.searchLoading,\n  centerAccess: state.User.centerAccess,\n  user: state.User.user,\n});\n\nexport default connect(mapStateToProps)(Lead);\n","import React, { useRef, useEffect } from \"react\";\nimport {\n  Col,\n  Row,\n  UncontrolledDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n} from \"reactstrap\";\n\nimport \"flatpickr/dist/themes/material_green.css\";\nimport Flatpickr from \"react-flatpickr\";\nimport { endOfDay, startOfDay } from \"date-fns\";\n\nconst Header = ({ reportDate, setReportDate }) => {\n  const changeDate = (days) => {\n    const date = new Date();\n    if (days) date.setDate(date.getDate() - days);\n    setReportDate({ start: startOfDay(date), end: endOfDay(date) });\n  };\n\n  const changeToMonth = () => {\n    const date = new Date(),\n      y = date.getFullYear(),\n      m = date.getMonth();\n    const firstDay = new Date(y, m, 1);\n    setReportDate({ start: startOfDay(firstDay), end: endOfDay(new Date()) });\n  };\n\n  // const ref = useRef();\n  // useEffect(() => {\n  //   import('flatpickr').then((flatpickr) => {\n  //     const fp = flatpickr(ref);\n  //     return () => fp.destroy();\n  //   });\n  // }, [ref]);\n\n  return (\n    <React.Fragment>\n      <div>\n        <div>\n          <Row className=\"justify-content-end\">\n            {/* <Col xs={12} md={6}>\n              <div className=\"d-flex align-items-end\">\n                <h5 className=\"display-5 mb-0 font-size-25 font-semi-bold\">\n                  Reports\n                </h5>\n                <h6 className=\"display-6 font-size-20 mb-0 ms-3\">\n                  Jagruti Rehabilitation Center\n                </h6>\n              </div>\n            </Col> */}\n            <Col xs={12}>\n              <div className=\"d-flex justify-content-md-end mt-4 mt-md-0\">\n                <div className=\"border border-dark d-flex align-items-center\">\n                  <div>\n                    <Flatpickr\n                      // ref={ref}\n                      name=\"dateOfAdmission\"\n                      value={reportDate.start || \"\"}\n                      onChange={([e]) => {\n                        setReportDate({\n                          ...reportDate,\n                          start: e,\n                        });\n                      }}\n                      options={{\n                        dateFormat: \"d M, Y\",\n                        maxDate: new Date(reportDate.end),\n                        disableMobile: true,\n                      }}\n                      className=\"form-control shadow-none bg-light border-0\"\n                      id=\"dateOfAdmission\"\n                    />\n                  </div>\n                  <div className=\"bg-light h-100 d-flex align-items-center\">\n                    -\n                  </div>\n                  <div>\n                    <Flatpickr\n                      // ref={ref}\n                      name=\"dateOfAdmission\"\n                      value={reportDate.end || \"\"}\n                      onChange={([e]) => {\n                        setReportDate({\n                          ...reportDate,\n                          end: e,\n                        });\n                      }}\n                      options={{\n                        dateFormat: \"d M, Y\",\n                        minDate: new Date(reportDate.start),\n                        disableMobile: true,\n                      }}\n                      className=\"form-control shadow-none bg-light border-0 text-end\"\n                      id=\"dateOfAdmission\"\n                    />\n                  </div>\n                  <div className=\"border-start border-dark\">\n                    <UncontrolledDropdown>\n                      <DropdownToggle\n                        caret\n                        color=\"light\"\n                        className=\"pe-3\"\n                      ></DropdownToggle>\n                      <DropdownMenu>\n                        <DropdownItem>\n                          <div onClick={() => changeDate()}>Today</div>\n                        </DropdownItem>\n                        <DropdownItem>\n                          <div onClick={() => changeDate(7)}>Last 7 days</div>\n                        </DropdownItem>\n                        <DropdownItem>\n                          <div onClick={() => changeDate(30)}>Last 30 days</div>\n                        </DropdownItem>\n                        <DropdownItem>\n                          <div onClick={changeToMonth}>This month</div>\n                        </DropdownItem>\n                      </DropdownMenu>\n                    </UncontrolledDropdown>\n                  </div>\n                </div>\n              </div>\n            </Col>\n          </Row>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Header;\n"],"names":["_ref","title","pageTitle","_jsx","React","children","Row","Col","xs","_jsxs","className","Link","to","statusBadge","Planned","Completed","Missed","Admitted","visitDateOptions","label","value","leadDate","dispatch","useDispatch","contacts","loading","pagination","useSelector","state","HubspotContacts","filters","setFilters","useState","visitType","status","assignedTo","visitDateFilter","setVisitDateFilter","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","tooltipOpen","setTooltipOpen","buttonRefs","useRef","useEffect","params","page","limit","visitDate","console","log","fetchHubspotContacts","current","filteredContacts","useMemo","filtered","filter","c","totalPages","totalItems","map","opt","concat","onClick","colSpan","length","contact","index","leadStatus","capitalizeWords","firstname","lastname","center","email","phone","gender","patient_age","amount","relation_with_patient","issues","comments","lifecyclestage","Button","ref","el","_ref2","togglePatientForm","data","leadData","leadOrigin","patient","name","trim","phoneNumber","isOpen","onMouseEnter","onMouseLeave","Tooltip","target","placement","delay","show","hide","Math","min","p","max","disabled","onChange","e","Number","size","leadFields","isRegister","arguments","undefined","type","options","connect","_state$Lead$createEdi","_state$Lead$createEdi2","user","User","Lead","createEditLead","lead","centers","Center","allCenters","centerAccess","_lead$followUp","_lead$patient","_lead$patient2","_lead$patient3","_lead$patient4","_lead$location","date","followUp","setFollowUp","_lead$followUp2","_","validation","useFormik","enableReinitialize","initialValues","author","_id","patientName","patientPhoneNumber","patientGender","patientAge","age","attendedBy","location","Array","isArray","ld","visitorName","relationWithPatient","charges","refferedBy","inquiry","comment","inquiryType","givenUpdates","validationSchema","Yup","required","test","onSubmit","values","updateLead","_objectSpread","fl","id","addLead","closeForm","resetForm","CustomModal","centered","Form","preventDefault","handleSubmit","action","field","i","lg","Label","htmlFor","_Fragment","item","idx","Input","handleChange","checked","touched","errors","FormFeedback","_validation$values$fi","includes","placeholder","onBlur","handleBlur","invalid","Flatpicker","Date","event","dateFormat","enableTime","time_24hr","disableMobile","fls","color","outline","node","defaultNodeRef","defaultNode","document","createElement","body","appendChild","removeChild","targetNode","ReactDOM","leads","leadQuery","setDeleteLead","setMergeLead","setUnMergeLead","leadGroup","Highlighter","searchWords","autoEscape","textToHighlight","RenderWhen","isTrue","UncontrolledTooltip","format","join","UncontrolledButtonDropdown","DropdownToggle","tag","Portal","querySelector","DropdownMenu","style","width","DropdownItem","href","unGroupLeads","searchLoading","setMergeWith","setLeadQuery","searchLead","JSON","stringify","grouped","UncontrolledDropdown","direction","val","right","Spinner","setLead","mergeWith","columns","selector","row","_row$patient","_row$patient2","setUngroupLeads","payload","mergeLeadcolumns","_row$patient3","_row$patient4","Boolean","toggle","SearchLead","DataTable","height","backgroundColor","fixedHeader","highlightOnHover","Divider","merge","mergeLead","mergeWithLead","unMerge","unMergeLead","setDate","start","startOfDay","end","endOfDay","deleteLead","activeTab","setActiveTab","fetchAllCenters","fetchCenters","onCloseClick","Container","fluid","BreadCrumb","Card","CardBody","Nav","tabs","NavItem","NavLink","cursor","TabContent","TabPane","tabId","sm","top","Header","reportDate","setReportDate","CSVLink","documents","lds","forEach","_lead$leads","_val$followUp","_val$location","push","vl","filename","headers","key","LeadList","LeadDashboard","PatientForm","LeadForm","Merge","UnMerge","DeleteModal","onDeleteClick","removeLead","changeDate","days","getDate","Flatpickr","maxDate","_ref3","minDate","caret","changeToMonth","y","getFullYear","m","getMonth","firstDay"],"sourceRoot":""}