{"version":3,"file":"static/js/4908.64d54a61.chunk.js","mappings":"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","sources":["pages/Booking/Components/SearchPatient.js","pages/Booking/Components/Form.js","pages/Booking/Components/EventInfo.js","pages/Booking/Components/EventItem.js","pages/Booking/index.js","Components/Scheduler/utils/schedular.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Button,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Input,\n  Spinner,\n  Dropdown,\n} from \"reactstrap\";\nimport RenderWhen from \"../../../Components/Common/RenderWhen\";\nimport debounce from \"lodash.debounce\";\nimport { connect } from \"react-redux\";\nimport { io } from \"socket.io-client\";\nimport config from \"../../../config\";\nconst socket = io(config.api.BASE_URL, {\n  path: \"/socket/search\",\n});\n\nconst SearchPatient = ({ validation, disabled, editEvent, centerAccess }) => {\n  const [filteredPatients, setFilteredPatients] = useState([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [dropdown, setDropdown] = useState(false);\n  const handleChange = (e) => {\n    const val = e.target.value;\n    setIsSearching(true);\n    socket.emit(\"search\", val);\n  };\n\n  const debouncedOnChange = debounce(handleChange, 500);\n\n  useEffect(() => {\n    socket.on(\"searchResults\", (data) => {\n      setIsSearching(false);\n      setFilteredPatients(data);\n    });\n    return () => {\n      socket.off(\"searchResults\");\n    };\n  }, []);\n\n  useEffect(() => {\n    if (filteredPatients?.length > 0 && !dropdown) setDropdown(true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filteredPatients]);\n\n  const isNewPatient = !validation.values.patient;\n  const isClearAvai = validation.values.patient;\n\n  return (\n    <React.Fragment>\n      <div>\n        {\" \"}\n        <Dropdown\n          isOpen={dropdown}\n          toggle={() => setDropdown(false)}\n          direction=\"down\"\n        >\n          <DropdownToggle className=\"p-0 w-100 position-relative\" color=\"light\">\n            <Input\n              disabled={disabled}\n              value={validation.values.patientName}\n              onChange={(e) => {\n                validation.setFieldValue(\"patientName\", e.target.value);\n                debouncedOnChange(e);\n              }}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\") {\n                  e.preventDefault();\n                }\n              }}\n              size={\"sm\"}\n              className=\"w-100\"\n            />\n            {/* add custom medicine */}\n            <RenderWhen isTrue={isSearching}>\n              <span\n                className=\"link-success dropdown-input-icon\"\n                style={{ right: \"50px\" }}\n              >\n                <Spinner size={\"sm\"} color=\"success\" />\n              </span>\n            </RenderWhen>\n            <RenderWhen isTrue={isClearAvai && !editEvent}>\n              <span className=\"link-success dropdown-input-icon\">\n                <Button\n                  onClick={() => {\n                    validation.setFieldValue(\"patient\", \"\");\n                    validation.setFieldValue(\"patientName\", \"\");\n                    validation.setFieldValue(\"phoneNumber\", \"\");\n                    validation.setFieldValue(\"gender\", \"\");\n                    validation.setFieldValue(\"center\", \"\");\n                  }}\n                  className=\"fs-9 p-1\"\n                  size=\"sm\"\n                  outline\n                  color=\"info\"\n                >\n                  Clear\n                </Button>\n              </span>\n            </RenderWhen>\n            <RenderWhen isTrue={isNewPatient}>\n              <span className=\"link-success dropdown-input-icon\">\n                <span\n                  id=\"patient-center\"\n                  className=\"badge fs-9 badge-soft-dark bg-soft-success text-success rounded p-1\"\n                >\n                  {\" \"}\n                  New\n                </span>\n              </span>\n            </RenderWhen>\n          </DropdownToggle>\n          <DropdownMenu className=\"dropdown-menu-md overflow-auto dropdown-height-md\">\n            <DropdownItem></DropdownItem>\n            {(filteredPatients || []).map((item) => (\n              <DropdownItem\n                className=\"d-flex align-items-center link-primary text-primary fs-6\"\n                key={item[\"_id\"]}\n                onClick={() => {\n                  setDropdown(false);\n                  validation.setFieldValue(\"uid\", `${item.id?.value}`);\n                  validation.setFieldValue(\"patientName\", item.name);\n                  validation.setFieldValue(\"patient\", item._id);\n                  validation.setFieldValue(\n                    \"phoneNumber\",\n                    item.phoneNumber.includes(\"+91\")\n                      ? item.phoneNumber\n                      : \"+91\" + item.phoneNumber\n                  );\n                  validation.setFieldValue(\"gender\", item.gender);\n                  if (centerAccess.includes(item.center?._id))\n                    validation.setFieldValue(\"center\", item.center?._id);\n                }}\n              >\n                <span>{item?.name}</span>\n              </DropdownItem>\n            ))}\n          </DropdownMenu>\n        </Dropdown>\n      </div>\n    </React.Fragment>\n  );\n};\n\nSearchPatient.propTypes = {\n  patients: PropTypes.array,\n  centerAccess: PropTypes.array,\n};\n\nconst mapStateToProps = (state) => ({\n  patients: state.Patient.allPatients,\n  searchLoading: state.Patient.searchLoading,\n  centerAccess: state.User.centerAccess,\n});\n\nexport default connect(mapStateToProps)(SearchPatient);\n","import React, { useEffect, useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Col,\n  Form,\n  FormFeedback,\n  Input,\n  Label,\n  Row,\n  Button,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n  UncontrolledDropdown,\n  Dropdown,\n  Spinner,\n  Alert,\n} from \"reactstrap\";\n\n//flatpicker\nimport Flatpicker from \"react-flatpickr\";\nimport \"flatpickr/dist/themes/material_green.css\";\n\nimport PhoneInputWithCountrySelect, {\n  isValidPhoneNumber,\n} from \"react-phone-number-input\";\nimport \"react-phone-number-input/style.css\";\nimport { parsePhoneNumberFromString } from \"libphonenumber-js\";\n\n// Formik Validation\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport SearchPatient from \"./SearchPatient\";\nimport { connect, useDispatch } from \"react-redux\";\nimport {\n  addAppointment,\n  fetchDoctorSchedule,\n  fetchPatientId,\n  fetchPatientPreviousDoctor,\n  searchPatientPhoneNumber,\n  searchUidPatient,\n  updateAppointment,\n} from \"../../../store/actions\";\nimport {\n  addHours,\n  addMinutes,\n  areIntervalsOverlapping,\n  differenceInHours,\n  differenceInMinutes,\n  eachMinuteOfInterval,\n  format,\n  isValid,\n  isWithinInterval,\n  setDate,\n  setHours,\n  setMonth,\n  setYear,\n  subMinutes,\n} from \"date-fns\";\nimport RenderWhen from \"../../../Components/Common/RenderWhen\";\n\nconst duration = [\n  {\n    hours: 0,\n    minutes: 5,\n  },\n  {\n    hours: 0,\n    minutes: 10,\n  },\n  {\n    hours: 0,\n    minutes: 15,\n  },\n  {\n    hours: 0,\n    minutes: 20,\n  },\n  {\n    hours: 0,\n    minutes: 30,\n  },\n  {\n    hours: 0,\n    minutes: 45,\n  },\n  {\n    hours: 1,\n    minutes: 0,\n  },\n  {\n    hours: 1,\n    minutes: 30,\n  },\n  {\n    hours: 2,\n    minutes: 0,\n  },\n  {\n    hours: 2,\n    minutes: 30,\n  },\n  {\n    hours: 3,\n    minutes: 30,\n  },\n  {\n    hours: 4,\n    minutes: 0,\n  },\n  {\n    hours: 4,\n    minutes: 30,\n  },\n];\n\nconst EventForm = ({\n  editEvent,\n  doctors,\n  toggleForm,\n  eventDate,\n  centers,\n  doctor,\n  slotsLoading,\n  doctorAvailableSlots,\n  appointmentsInRange,\n  generatedPatientId,\n  patientPreviousDoctor,\n  searchPhoneNumber,\n  phoneNumberLoading,\n  uidPatient,\n  uidLoading,\n  centerAccess,\n}) => {\n  const dispatch = useDispatch();\n  const [dateSlots, setDateSlots] = useState([]);\n  const [dropdown, setDropdown] = useState(false);\n  const [uidDropdown, setUidDropdown] = useState(false);\n  const [slotsError, setSlotsError] = useState(false);\n\n  //ref for slots dropdown\n  const selectRef = useRef(null);\n\n  const validation = useFormik({\n    // enableReinitialize : use this flag when initial values needs to be changed\n    enableReinitialize: true,\n\n    initialValues: {\n      id: editEvent?._id,\n      uid: editEvent ? editEvent?.patient?.id?.value : \"\",\n      patientName: editEvent ? editEvent.patient?.name : \"\",\n      patient: editEvent ? editEvent.patient?._id : \"\",\n      consultationType: editEvent ? editEvent.consultationType : \"\",\n      phoneNumber: editEvent?.patient?.phoneNumber?.includes(\"+91\")\n        ? editEvent?.patient?.phoneNumber\n        : \"+91\" + editEvent?.patient?.phoneNumber || \"\",\n      gender: editEvent ? editEvent.patient?.gender : \"\",\n      center: editEvent ? editEvent?.center?._id : \"\",\n      doctor: editEvent ? editEvent.doctor?._id : \"\",\n      startDate: editEvent\n        ? new Date(editEvent.startDate)\n        : eventDate\n        ? new Date(eventDate)\n        : \"\",\n      endDate: editEvent\n        ? new Date(editEvent.endDate)\n        : eventDate\n        ? addMinutes(new Date(eventDate), 15)\n        : \"\",\n      at: editEvent ? new Date(editEvent.startDate) : \"\",\n      // at: editEvent\n      // ? new Date(editEvent.startDate)\n      // : eventDate\n      // ? new Date(eventDate)\n      // : \"\",\n      duration: editEvent\n        ? `${differenceInHours(\n            new Date(editEvent.endDate),\n            new Date(editEvent.startDate)\n          )}-${differenceInMinutes(\n            new Date(editEvent.endDate),\n            new Date(editEvent.startDate)\n          )}`\n        : `0-15`,\n    },\n    validationSchema: Yup.object({\n      patientName: Yup.string().required(\"Please Enter Patient\"),\n      // uid: Yup.string().required(\"Please Enter Patient UID\"),\n      doctor: Yup.string().required(\"Please Enter Doctor\"),\n      consultationType: Yup.string().required(\n        \"Please Select Consultation type\"\n      ),\n      phoneNumber: Yup.string()\n        .required(\"Please Enter Phone number\")\n        .test(\"is-valid-phone\", \"Invalid phone number\", function (value) {\n          const phoneNumber = parsePhoneNumberFromString(value)?.nationalNumber;\n\n          return isValidPhoneNumber(value);\n        }),\n      gender: Yup.string().required(\"Please Select Gender\"),\n      startDate: Yup.date().required(\"Please Enter Start Date\"),\n      endDate: Yup.date().required(\"Please Enter End Date\"),\n      at: Yup.date()\n        .required(\"Please select time\")\n        .test(\"booking slot validation\", \"Already booked\", function (value) {\n          //If default start date is aleady booked then clear it out\n          const isBooked =\n            isValid(new Date(value)) &&\n            appointmentsInRange?.find(\n              (val) =>\n                format(new Date(val.startDate), \"HH:mm\") ===\n                format(new Date(value), \"HH:mm\")\n            );\n          if (isBooked && !editEvent) return false;\n          else return true;\n        }),\n      duration: Yup.string()\n        .required(\"Please select duration\")\n        .test(\n          \"booking slot duration validation\",\n          \"Appointment overlaps with other appointments!\",\n          function (value) {\n            const doesItOverlapsExsitingEvents = appointmentsInRange?.find(\n              (e) => {\n                return (\n                  editEvent?._id !== e._id &&\n                  areIntervalsOverlapping(\n                    {\n                      start: validation.values.startDate,\n                      end: validation.values.endDate,\n                    },\n                    {\n                      start: new Date(e.startDate),\n                      end: new Date(e.endDate),\n                    }\n                  )\n                );\n              }\n            );\n            if (doesItOverlapsExsitingEvents) {\n              return false;\n            } else return true;\n          }\n        ),\n    }),\n    onSubmit: (values) => {\n      if (editEvent) {\n        dispatch(updateAppointment(values));\n      } else {\n        dispatch(\n          addAppointment({\n            ...values,\n            uid: values.uid\n              ? values.uid\n              : generatedPatientId?.value?.replace(/\\D/g, \"\"),\n          })\n        );\n      }\n      // toggleForm();\n      // validation.resetForm();\n    },\n  });\n\n  useEffect(() => {\n    if (!editEvent) {\n      validation.resetForm();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, editEvent]);\n\n  useEffect(() => {\n    const patient = validation.values.patient;\n    if (!editEvent && patient) {\n      dispatch(fetchPatientPreviousDoctor({ patient }));\n    }\n  }, [dispatch, validation.values.patient, editEvent]);\n\n  useEffect(() => {\n    if (!editEvent) {\n      dispatch(fetchPatientId());\n    }\n  }, [dispatch, editEvent]);\n\n  const filterDoctors = (docs) => {\n    // return (docs || []).filter((_) => {\n    //   return _.workingSchedules?.workingSchedule?.find(\n    //     (sch) => sch?.center?._id === validation.values?.center\n    //   );\n    // });\n\n    const docCenters = docs.map((doc) => ({\n      ...doc,\n      centerAccess: doc.centerAccess.map((center) => center._id),\n    }));\n\n    return (docCenters || []).filter((doc) =>\n      doc.centerAccess?.includes(validation.values.center)\n    );\n  };\n\n  useEffect(() => {\n    setDateSlots(doctorAvailableSlots || []);\n  }, [doctorAvailableSlots]);\n\n  useEffect(() => {\n    setDateSlots([]);\n  }, []);\n\n  useEffect(() => {\n    if (\n      patientPreviousDoctor &&\n      filterDoctors(doctors).find(\n        (doc) => doc.user?._id === patientPreviousDoctor._id\n      )\n    ) {\n      validation.setFieldValue(\"doctor\", patientPreviousDoctor._id);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [patientPreviousDoctor]);\n\n  //fetch doctor schedule complete validations for appointment booking generateDocScheduleSlots\n  useEffect(() => {\n    const doc = validation.values.doctor;\n    const center = validation.values.center;\n    const startDate = validation.values.startDate;\n    const consultationType = validation.values.consultationType || \"OFFLINE\";\n\n    if (doc && center && startDate && consultationType) {\n      const [hours, minutes] = validation.values.duration\n        ?.split(\"-\")\n        .map(Number);\n      dispatch(\n        fetchDoctorSchedule({\n          doctorId: doc,\n          centerId: center,\n          date: format(startDate, \"yyyy-MM-dd\"),\n          meetingType: validation.values.consultationType,\n          slotDuration: hours * 60 + minutes,\n        })\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    dispatch,\n    validation.values.doctor,\n    validation.values.center,\n    validation.values.startDate,\n    validation.values.consultationType,\n    validation.values.duration,\n  ]);\n\n  useEffect(() => {\n    if (!doctorAvailableSlots?.length && validation.values.doctor) {\n      validation.setFieldValue(\"at\", \"\");\n      setSlotsError(true);\n    } else if (doctorAvailableSlots?.length) {\n      setSlotsError(false);\n      selectRef.current.focus(); // Attempt to open the dropdown\n      // selectRef.current.click(); // Helps trigger dropdown\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [doctorAvailableSlots]);\n\n  const findDocCenterSchedule = (cen, doc, day) => {\n    const findCenter = doc?.workingSchedule?.workingSchedule?.find(\n      (item) => item?.center?._id === cen && item.days?.includes(day?.getDay())\n    );\n\n    return findCenter;\n  };\n\n  // const generateDocScheduleSlots = () => {\n  //   const startDate = validation.values.startDate;\n  //   const findCenter = findDocCenterSchedule(\n  //     validation.values.center,\n  //     doctor,\n  //     startDate\n  //   );\n\n  //   if (findCenter) {\n  //     const start =\n  //       findCenter.sessions[0]?.start && new Date(findCenter.sessions[0].start);\n  //     const end =\n  //       findCenter.sessions[0]?.end && new Date(findCenter.sessions[0].end);\n  //     const checkInterval =\n  //       start && end && format(start, \"HH\") < format(end, \"HH\"); //isValidInterval(start, end);\n\n  //     if (checkInterval && findCenter.days.includes(startDate?.getDay())) {\n  //       const sl = eachMinuteOfInterval(\n  //         {\n  //           start: new Date(\n  //             new Date(\n  //               new Date(\n  //                 new Date(\n  //                   new Date(new Date().setDate(startDate.getDate())).setMonth(\n  //                     startDate.getMonth()\n  //                   )\n  //                 ).setFullYear(startDate.getFullYear())\n  //               ).setHours(start.getHours())\n  //             ).setMinutes(start.getMinutes())\n  //           ),\n  //           end: new Date(\n  //             new Date(\n  //               new Date(\n  //                 new Date(\n  //                   new Date(new Date().setDate(startDate.getDate())).setMonth(\n  //                     startDate.getMonth()\n  //                   )\n  //                 ).setFullYear(startDate.getFullYear())\n  //               ).setHours(end.getHours())\n  //             ).setMinutes(end.getMinutes())\n  //           ),\n  //         },\n  //         { step: 5 }\n  //       );\n  //       return sl;\n  //     } else return [];\n  //   } else {\n  //     validation.setFieldValue(\"doctor\", \"\");\n  //     return [];\n  //   }\n  // };\n\n  useEffect(() => {\n    if (validation.values.doctor && validation.values.center && doctor) {\n      // setDateSlots(generateDocScheduleSlots());\n    }\n\n    // const slots = generateDocScheduleSlots();\n    // if (\n    //   isValid(new Date(validation.values.at)) &&\n    //   slots?.length > 0 &&\n    //   validation.values.doctor &&\n    //   !editEvent\n    // ) {\n    //   const findSlot = slots.find((slot) => {\n    //     return (\n    //       format(slot, \"HH:mm\") ===\n    //       format(new Date(validation.values.at), \"HH:mm\")\n    //     );\n    //   });\n\n    //   if (!findSlot) validation.setFieldValue(\"at\", \"\");\n    // }\n\n    // }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    // validation.values.doctor,\n    validation.values.startDate,\n    validation.values.center,\n    doctor,\n  ]);\n\n  const calcDuration = () => {\n    const totalMinutes = differenceInMinutes(\n      new Date(validation.values.endDate),\n      new Date(validation.values.startDate)\n    );\n    const hours = Math.floor(totalMinutes / 60);\n    const minutes = totalMinutes % 60;\n\n    return { minutes, hours };\n  };\n\n  const fields = [\n    {\n      label: \"Gender\",\n      name: \"gender\",\n      type: \"radio\",\n      options: [\"MALE\", \"FEMALE\", \"OTHERS\"],\n    },\n  ];\n\n  useEffect(() => {\n    if (searchPhoneNumber?.length > 0 && !dropdown) setDropdown(true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchPhoneNumber]);\n\n  useEffect(() => {\n    if (uidPatient?.length > 0 && !uidDropdown) setUidDropdown(true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [uidPatient]);\n\n  return (\n    <React.Fragment>\n      <div>\n        <Form\n          onSubmit={(e) => {\n            e.preventDefault();\n            validation.handleSubmit();\n            // toggle();\n            return false;\n          }}\n          className=\"needs-validation\"\n          action=\"#\"\n        >\n          <div className=\"d-flex justify-content-center\">\n            <div className=\"w-25 w-xs-50\">\n              <Dropdown\n                className=\"m-auto mb-3\"\n                isOpen={uidDropdown}\n                toggle={() => setUidDropdown(false)}\n                direction=\"down\"\n              >\n                <Label htmlFor=\"uid\" className=\"form-label\">\n                  UID\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <DropdownToggle\n                  className=\"p-0 w-100 position-relative\"\n                  // color=\"light\"\n                >\n                  <Input\n                    disabled={editEvent ? true : false}\n                    type={\"text\"}\n                    name={\"uid\"}\n                    onChange={validation.handleChange}\n                    onBlur={validation.handleBlur}\n                    value={validation.values.uid || \"\"}\n                    // invalid={\n                    //   validation.touched.uid && validation.errors.uid\n                    //     ? true\n                    //     : false\n                    // }\n                    className=\"form-control\"\n                    placeholder=\"\"\n                    id=\"uid\"\n                    bsSize=\"sm\"\n                  />\n                  <button\n                    onClick={() => {\n                      dispatch(\n                        searchUidPatient({\n                          uid: validation.values.uid,\n                        })\n                      );\n                    }}\n                    className=\"btn btn-sm py-0 px-1 my-auto dropdown-input-icon\"\n                    style={{ right: \"20px\", top: 0, bottom: 0 }}\n                  >\n                    <span className=\"mdi mdi-magnify \"></span>\n                  </button>\n                  <RenderWhen isTrue={uidLoading}>\n                    <span\n                      className=\"link-success dropdown-input-icon\"\n                      style={{ right: \"50px\" }}\n                    >\n                      <Spinner size={\"sm\"} color=\"success\" />\n                    </span>\n                  </RenderWhen>\n                </DropdownToggle>\n                <DropdownMenu className=\"dropdown-menu-md overflow-auto dropdown-height-md\">\n                  {(uidPatient || []).map((item) => (\n                    <DropdownItem\n                      className=\"d-flex align-items-center link-primary text-primary fs-6\"\n                      key={item[\"_id\"]}\n                      onClick={() => {\n                        validation.setFieldValue(\"uid\", `${item.id?.value}`);\n                        validation.setFieldValue(\"patientName\", item.name);\n                        validation.setFieldValue(\"patient\", item._id);\n                        validation.setFieldValue(\n                          \"phoneNumber\",\n                          item.phoneNumber.includes(\"+91\")\n                            ? item.phoneNumber\n                            : \"+91\" + item.phoneNumber\n                        );\n                        validation.setFieldValue(\"gender\", item.gender);\n                        validation.setFieldValue(\"center\", item.center?._id);\n                      }}\n                    >\n                      <span>{item.name}</span>\n                    </DropdownItem>\n                  ))}\n                </DropdownMenu>\n              </Dropdown>\n\n              {validation.touched.phoneNumber &&\n              validation.errors.phoneNumber ? (\n                <FormFeedback type=\"invalid\">\n                  <div>{validation.errors.phoneNumber}</div>\n                </FormFeedback>\n              ) : null}\n            </div>\n          </div>\n          <Row>\n            <Col xs={12} md={6}>\n              <Dropdown\n                isOpen={dropdown}\n                toggle={() => setDropdown(false)}\n                direction=\"down\"\n                className=\"booking-phone-number\"\n              >\n                <Label htmlFor=\"phone-number\" className=\"form-label\">\n                  Phone Number\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <DropdownToggle\n                  className=\"p-0 w-100 position-relative\"\n                  // color=\"light\"\n                >\n                  <PhoneInputWithCountrySelect\n                    placeholder=\"Enter phone number\"\n                    name={\"phoneNumber\"}\n                    value={validation.values.phoneNumber}\n                    onBlur={validation.handleBlur}\n                    onChange={(value) => {\n                      validation.setFieldValue(\"phoneNumber\", value);\n                    }}\n                    onKeyDown={(e) => {\n                      if (e.key === \"Enter\") {\n                        e.preventDefault(); // Prevent default form submission\n                        const phNumber = validation.values.phoneNumber;\n                        const isValid = parsePhoneNumberFromString(phNumber);\n                        const number = isValid?.nationalNumber || phNumber;\n\n                        dispatch(\n                          searchPatientPhoneNumber({\n                            phoneNumber: number,\n                          })\n                        ); // Manually trigger the phone search\n                      }\n                    }}\n                    className=\"w-full flex-grow-1\"\n                    defaultCountry=\"IN\"\n                    style={{ height: \"40px\" }}\n                    id=\"phone-number\"\n                  />\n                  <button\n                    onClick={() => {\n                      const phNumber = validation.values.phoneNumber;\n                      const isValid = parsePhoneNumberFromString(phNumber);\n                      const number = isValid?.nationalNumber || phNumber;\n\n                      dispatch(\n                        searchPatientPhoneNumber({\n                          phoneNumber: number,\n                        })\n                      );\n                    }}\n                    type=\"button\"\n                    className=\"btn btn-sm py-0 px-1 my-auto dropdown-input-icon\"\n                    style={{ right: \"20px\", top: 0, bottom: 0 }}\n                  >\n                    <span className=\"mdi mdi-magnify\"></span>\n                  </button>\n                  <RenderWhen isTrue={phoneNumberLoading}>\n                    <span\n                      className=\"link-success dropdown-input-icon\"\n                      style={{ right: \"50px\" }}\n                    >\n                      <Spinner size={\"sm\"} color=\"success\" />\n                    </span>\n                  </RenderWhen>\n                </DropdownToggle>\n                <DropdownMenu className=\"dropdown-menu-md overflow-auto dropdown-height-md px-2\">\n                  {(searchPhoneNumber || []).map((item) => (\n                    <DropdownItem\n                      className=\"d-flex align-items-center link-primary text-primary fs-6\"\n                      key={item[\"_id\"]}\n                      onClick={() => {\n                        validation.setFieldValue(\"uid\", `${item.id?.value}`);\n                        validation.setFieldValue(\"patientName\", item.name);\n                        validation.setFieldValue(\"patient\", item._id);\n                        validation.setFieldValue(\n                          \"phoneNumber\",\n                          item.phoneNumber.includes(\"+91\")\n                            ? item.phoneNumber\n                            : \"+91\" + item.phoneNumber\n                        );\n                        validation.setFieldValue(\"gender\", item.gender);\n                        validation.setFieldValue(\"center\", item.center?._id);\n                      }}\n                    >\n                      <span>{item.name}</span>\n                    </DropdownItem>\n                  ))}\n                </DropdownMenu>\n              </Dropdown>\n\n              {validation.touched.phoneNumber &&\n              validation.errors.phoneNumber ? (\n                <FormFeedback type=\"invalid\" className=\"d-block\">\n                  <div>{validation.errors.phoneNumber}</div>\n                </FormFeedback>\n              ) : null}\n            </Col>\n            <Col xs={12} md={6}>\n              <div className=\"mb-3\">\n                <Label htmlFor=\"doctor\" className=\"form-label\">\n                  Patient Name\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <SearchPatient\n                  validation={validation}\n                  editEvent={editEvent}\n                  disabled={editEvent ? true : false}\n                />\n                {validation.touched.patient && validation.errors.patient ? (\n                  <FormFeedback type=\"invalid\" className=\"d-block\">\n                    <div>{validation.errors.patient}</div>\n                  </FormFeedback>\n                ) : null}\n              </div>\n            </Col>\n            <Col xs={12} md={6} className=\"d-flex flex-wrap mb-3\">\n              {(fields || []).map((field) => (\n                <div>\n                  <Label>{field.label}</Label>\n                  <div className=\"d-flex flex-wrap\">\n                    {(field.options || []).map((item, idx) => (\n                      <React.Fragment key={item + idx}>\n                        <div\n                          key={item + idx}\n                          className=\"d-flex me-5 align-items-center\"\n                        >\n                          <Input\n                            // disabled={editEvent ? true : false}\n                            className=\"me-2 mt-0\"\n                            type={field.type}\n                            name={field.name}\n                            value={item}\n                            onChange={validation.handleChange}\n                            checked={validation.values.gender === item}\n                          />\n                          <Label className=\"form-label fs-14 mb-0\">\n                            {item}\n                          </Label>\n                        </div>\n                      </React.Fragment>\n                    ))}\n                    {validation.touched[field.name] &&\n                    validation.errors[field.name] ? (\n                      <FormFeedback type=\"invalid\" className=\"d-block\">\n                        {validation.errors[field.name]}\n                      </FormFeedback>\n                    ) : null}\n                  </div>\n                </div>\n              ))}\n            </Col>\n            <Col xs={12} md={6}>\n              <div className=\"mb-3 w-100\">\n                <Label>Consultation Type</Label>\n                <Input\n                  name={\"consultationType\"}\n                  className=\"form-control\"\n                  type={\"select\"}\n                  onChange={validation.handleChange}\n                  onBlur={validation.handleBlur}\n                  value={validation.values.consultationType || \"\"}\n                  invalid={\n                    validation.touched.consultationType &&\n                    validation.errors.consultationType\n                      ? true\n                      : false\n                  }\n                  bsSize=\"sm\"\n                >\n                  <option value=\"\" selected disabled hidden>\n                    Choose here\n                  </option>\n                  <option value={\"ONLINE\"}>Online</option>\n                  <option value={\"OFFLINE\"}>Offline</option>\n                </Input>\n              </div>\n            </Col>\n            <Col xs={12} md={6}>\n              <div className=\"mb-3\">\n                <Label htmlFor=\"center\" className=\"form-label\">\n                  Center\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Input\n                  type=\"select\"\n                  name=\"center\"\n                  onChange={(e) => {\n                    validation.handleChange(e);\n                    const findCenter = findDocCenterSchedule(\n                      e.target.value,\n                      doctor\n                    );\n                    if (!findCenter) {\n                      validation.setFieldValue(\"doctor\", \"\");\n                    }\n                  }}\n                  onBlur={validation.handleBlur}\n                  value={validation.values.center || \"\"}\n                  invalid={\n                    validation.touched.center && validation.errors.center\n                      ? true\n                      : false\n                  }\n                  className=\"form-control\"\n                  placeholder=\"\"\n                  id=\"center\"\n                  bsSize=\"sm\"\n                >\n                  <option value=\"\" selected disabled hidden>\n                    Choose here\n                  </option>\n                  {(centers || []).map((option, idx) => (\n                    <option key={idx} value={option._id}>\n                      {option.title}\n                    </option>\n                  ))}\n                </Input>\n                {validation.touched.doctor && validation.errors.doctor ? (\n                  <FormFeedback type=\"invalid\">\n                    <div>{validation.errors.doctor}</div>\n                  </FormFeedback>\n                ) : null}\n              </div>\n            </Col>\n            <Col xs={12} md={6}>\n              <div className=\"mb-3\">\n                <Label htmlFor=\"doctor\" className=\"form-label\">\n                  Doctor\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Input\n                  type=\"select\"\n                  name=\"doctor\"\n                  onChange={validation.handleChange}\n                  onBlur={validation.handleBlur}\n                  defaultValue={\"\"}\n                  value={validation.values.doctor || \"\"}\n                  invalid={\n                    validation.touched.doctor && validation.errors.doctor\n                      ? true\n                      : false\n                  }\n                  className=\"form-control\"\n                  placeholder=\"\"\n                  id=\"doctor\"\n                  bsSize=\"sm\"\n                >\n                  <option value=\"\" selected disabled hidden>\n                    Choose here\n                  </option>\n                  {(validation.values.consultationType === \"ONLINE\"\n                    ? doctors\n                    : filterDoctors(doctors) || []\n                  ).map((option, idx) => (\n                    <option key={idx} value={option?._id}>\n                      {option?.name}\n                    </option>\n                  ))}\n                </Input>\n                {validation.touched.doctor && validation.errors.doctor ? (\n                  <FormFeedback type=\"invalid\">\n                    <div>{validation.errors.doctor}</div>\n                  </FormFeedback>\n                ) : null}\n              </div>\n            </Col>\n            <Col xs={12} md={4}>\n              <div className=\"mb-3\">\n                <Label htmlFor=\"startDate\" className=\"form-label\">\n                  Scheduled On\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Flatpicker\n                  name=\"startDate\"\n                  value={\n                    (isValid(validation.values.startDate) &&\n                      validation.values.startDate) ||\n                    \"\"\n                  }\n                  onChange={([e]) => {\n                    const sDate = new Date(validation.values.startDate);\n                    const nDate = new Date(validation.values.endDate);\n                    const updateSDate = setDate(\n                      setMonth(setYear(sDate, e.getFullYear()), e.getMonth()),\n                      e.getDate()\n                    );\n                    const updateNDate = setDate(\n                      setMonth(setYear(nDate, e.getFullYear()), e.getMonth()),\n                      e.getDate()\n                    );\n\n                    if (isValid(e)) {\n                      validation.setFieldValue(\"at\", updateSDate);\n                      validation.setFieldValue(\"startDate\", updateSDate);\n                      validation.setFieldValue(\"endDate\", updateNDate);\n                    }\n                  }}\n                  options={{\n                    // enableTime: true,\n                    dateFormat: \"d M, Y\",\n                    time_24hr: false,\n                    // defaultDate: moment().format('LT'),\n                  }}\n                  className=\"form-control py-1 shadow-none bg-light\"\n                  id=\"startDate\"\n                />\n              </div>\n            </Col>\n            <Col xs={12} md={4}>\n              <div className=\"mb-3\">\n                <Label htmlFor=\"doctor\" className=\"form-label\">\n                  At\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <div className=\"position-relative\">\n                  <Input\n                    ref={selectRef}\n                    type=\"select\"\n                    name=\"at\"\n                    // defaultValue={\"\"}\n                    value={\n                      isValid(validation.values.at)\n                        ? format(new Date(validation.values.at), \"HH:mm\")\n                        : \"\"\n                    }\n                    onChange={(e) => {\n                      const selectedOption =\n                        e.target.options[e.target.selectedIndex];\n                      const d = new Date(selectedOption.id);\n\n                      const sDate = new Date(validation.values.startDate);\n                      const nDate = new Date(validation.values.endDate);\n                      const diffHours = differenceInHours(nDate, sDate);\n                      const diffMinutes = differenceInMinutes(nDate, sDate);\n\n                      const updatedSDate = setHours(\n                        sDate,\n                        d.getHours()\n                      ).setMinutes(d.getMinutes());\n                      const updatedNDate = addMinutes(\n                        addHours(new Date(updatedSDate), diffHours),\n                        diffMinutes\n                      );\n\n                      validation.setFieldValue(\n                        \"startDate\",\n                        new Date(updatedSDate)\n                      );\n                      validation.setFieldValue(\"at\", new Date(updatedSDate));\n                      validation.setFieldValue(\n                        \"endDate\",\n                        new Date(updatedNDate)\n                      );\n                    }}\n                    invalid={\n                      validation.touched.at && validation.errors.at\n                        ? true\n                        : false\n                    }\n                    onBlur={validation.handleBlur}\n                    bsSize=\"sm\"\n                    className=\"form-control\"\n                    placeholder=\"\"\n                    id=\"\"\n                  >\n                    <option value=\"\" selected disabled hidden>\n                      Choose here\n                    </option>\n                    {(dateSlots || []).map((slot, idx) => {\n                      // const isBooked = appointmentsInRange?.find((val) => {\n                      //   return isWithinInterval(addMinutes(option, 1), {\n                      //     start: new Date(val.startDate),\n                      //     end: new Date(val.endDate),\n                      //   });\n                      //   // format(new Date(val.startDate), \"dd-MM-yyyy HH:mm\") ===\n                      //   // format(option, \"dd-MM-yyyy HH:mm\")\n                      // });\n\n                      if (slot.booked) {\n                        return (\n                          <option\n                            key={idx}\n                            value={format(new Date(slot.start), \"HH:mm\")}\n                            id={slot.start}\n                            disabled={true}\n                          >\n                            {format(new Date(slot.start), \"hh:mm a\")} Already\n                            Booked\n                          </option>\n                        );\n                      } else\n                        return (\n                          <option\n                            key={idx}\n                            value={format(new Date(slot.start), \"HH:mm\")}\n                            id={slot.start}\n                          >\n                            {format(new Date(slot.start), \"hh:mm a\")}\n                          </option>\n                        );\n                    })}\n                  </Input>\n\n                  <RenderWhen isTrue={slotsLoading}>\n                    <span\n                      className=\"link-success dropdown-input-icon\"\n                      style={{ right: \"50px\" }}\n                    >\n                      <Spinner size={\"sm\"} color=\"success\" />\n                    </span>\n                  </RenderWhen>\n                </div>\n\n                {slotsError && (\n                  <FormFeedback type=\"invalid\" className=\"d-block\">\n                    <div>Doctor not available</div>\n                  </FormFeedback>\n                )}\n\n                {validation.touched.at && validation.errors.at ? (\n                  <FormFeedback type=\"invalid\" className=\"d-block\">\n                    <div>{validation.errors.at}</div>\n                  </FormFeedback>\n                ) : null}\n              </div>\n            </Col>\n            <Col xs={12} md={4}>\n              <div className=\"mb-3\">\n                <Label htmlFor=\"\" className=\"form-label\">\n                  For\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Input\n                  type=\"select\"\n                  name=\"duration\"\n                  onChange={(e) => {\n                    const value = e.target.value;\n                    const [hours, minutes] = value.split(\"-\").map(Number);\n\n                    const date = new Date(validation.values.startDate);\n                    if (date) {\n                      const endDate = addHours(\n                        addMinutes(date, minutes),\n                        hours\n                      );\n\n                      validation.setFieldValue(\"duration\", value);\n                      validation.setFieldValue(\"endDate\", endDate);\n                    }\n                  }}\n                  onBlur={validation.handleBlur}\n                  value={\n                    `${calcDuration().hours}-${calcDuration().minutes}` || \"\"\n                  }\n                  className=\"form-control\"\n                  bsSize=\"sm\"\n                  placeholder=\"\"\n                  id=\"\"\n                >\n                  <option value=\"\" selected disabled hidden>\n                    Choose here\n                  </option>\n                  {(duration || []).map((option, idx) => (\n                    <option\n                      key={idx}\n                      value={`${option.hours}-${option.minutes}`}\n                    >\n                      {option.hours\n                        ? `${option.hours} hr ${option.minutes} min`\n                        : `${option.minutes} min`}\n                    </option>\n                  ))}\n                </Input>\n                {validation.touched.duration && validation.errors.duration ? (\n                  <FormFeedback type=\"invalid\" className=\"d-block\">\n                    <div>{validation.errors.duration}</div>\n                  </FormFeedback>\n                ) : null}\n              </div>\n            </Col>\n            <Col xs={12}>\n              <div className=\"d-flex justify-content-end gap-3 mt-3\">\n                <Button\n                  onClick={() => {\n                    toggleForm();\n                    validation.resetForm();\n                  }}\n                  size=\"sm\"\n                  color=\"danger\"\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" size=\"sm\" color=\"secondary\">\n                  Save\n                </Button>\n              </div>\n            </Col>\n          </Row>\n        </Form>{\" \"}\n      </div>\n    </React.Fragment>\n  );\n};\n\nEventForm.propTypes = {};\n\nconst mapStateToProps = (state) => ({\n  eventDate: state.Booking.eventDate,\n  centers: state.Center.data,\n  centerAccess: state.User.centerAccess,\n  doctors: state.Setting.doctorSchedule,\n  slotsLoading: state.Setting.loading,\n  doctorAvailableSlots: state.Setting.doctorAvailableSlots,\n  doctor: state.Setting.doctor,\n  appointmentsInRange: state.Setting.appointmentsInRange,\n  patientPreviousDoctor: state.Booking.patientPreviousDoctor,\n  searchPhoneNumber: state.Patient.phoneNumberPatients,\n  phoneNumberLoading: state.Patient.phoneNumberLoading,\n  uidPatient: state.Patient.uidPatient,\n  uidLoading: state.Patient.uidLoading,\n  generatedPatientId: state.Patient.generatedPatientId,\n});\n\nexport default connect(mapStateToProps)(EventForm);\n","import React from \"react\";\nimport { differenceInMinutes, format } from \"date-fns\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  createEditBill,\n  createEditChart,\n  setBillDate,\n  setChartDate,\n  setTotalAmount,\n  togglePrint,\n  viewPatient,\n} from \"../../../store/actions\";\nimport {\n  CLINICAL_NOTE,\n  INVOICE,\n  OPD,\n  PRESCRIPTION,\n} from \"../../../Components/constants/patient\";\nimport MeetingComponent from \"../../Meeting/Components\";\nimport { Link } from \"react-router-dom\";\n\nconst EventInfo = ({\n  data,\n  setAppointment,\n  toggleForm,\n  toggleCancelEvent,\n  toggleDeleteEvent,\n}) => {\n  const dispatch = useDispatch();\n  const meetingId = data?.meetingId;\n  const doctorName = data?.doctor?.name;\n  const userType = \"doctor\";\n  return (\n    <React.Fragment>\n      <div>\n        <div className=\"d-flex justify-content-end align-items-center\">\n          {!data?.isCancelled && (\n            <>\n              {meetingId ? (\n                <MeetingComponent\n                  meetingId={meetingId}\n                  name={doctorName}\n                  userType={userType}\n                />\n              ) : null}\n              <button\n                onClick={() => {\n                  toggleForm(data);\n                }}\n                type=\"button\"\n                className=\"btn btn-light ms-2 btn-sm\"\n              >\n                <i className=\"ri-quill-pen-line fs-8\"></i>\n              </button>\n            </>\n          )}\n          {!data?.isCancelled && (\n            <button\n              onClick={() => {\n                toggleCancelEvent(data._id);\n              }}\n              type=\"button\"\n              className=\"btn btn-light ms-2 btn-sm\"\n            >\n              <i className=\"ri-close-circle-line text-danger\"></i>\n            </button>\n          )}\n          {data?.isCancelled && (\n            <div className=\"text-muted me-2 text-warning\">Cancelled</div>\n          )}\n          {data?.isCancelled && (\n            <button\n              onClick={() => {\n                toggleDeleteEvent(data._id);\n              }}\n              type=\"button\"\n              className=\"btn btn-light ms-2 btn-sm\"\n            >\n              <i className=\"ri-delete-bin-6-line fs-8\"></i>\n            </button>\n          )}\n        </div>\n        <div className=\"patient?-profile\">\n          <img\n            className=\"rounded-circle avatar-smm me-2 header-profile-user\"\n            src={\n              data?.patient?.profilePicture?.url ||\n              \"//www.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e?s=200&r=pg&d=mm\"\n            }\n            alt=\"Patient Avatar\"\n          />\n          <div>\n            <h5 className=\"font-semi-bold text-capitalize font-size-16\">\n              <Link\n                key={data?.patient?._id}\n                to={`/patient/${data?.patient?._id}`}\n                onClick={() => {\n                  dispatch(viewPatient(data.patient));\n                  dispatch(\n                    setTotalAmount({\n                      totalPayable: 0,\n                      totalAdvance: 0,\n                    })\n                  );\n                }}\n                className=\"notify-item\"\n              >\n                {data?.patient?.name || \"Patient Name\"}{\" \"}\n                {`${data?.patient?.id?.prefix}${data?.patient?.id?.value}`}\n              </Link>\n            </h5>\n            <div className=\"font-size-14\">\n              {data?.patient?.gender && <span>{data.patient.gender}</span>}\n            </div>\n          </div>\n        </div>\n        <div className=\"text-muted mt-3\">\n          {data?.patient?.phoneNumber && <div>{data.patient.phoneNumber}</div>}\n          {data?.patient?.email && <div>{data.patient.email}</div>}\n        </div>\n        <div className=\"d-flex justify-content-between pt-1 pb-1 mt-3 align-items-center border-top border-bottom\">\n          <div className=\"text-muted w-50\">\n            In-Clinic Appointment with {data?.doctor?.name} on{\" \"}\n            <span className=\"font-semibold\">\n              {data?.startDate &&\n                format(new Date(data.startDate), \"dd MMM yyyy\")}\n            </span>{\" \"}\n            at{\" \"}\n            <span className=\"font-semibold\">\n              {data?.startDate && format(new Date(data.startDate), \"hh:mm a\")}\n            </span>{\" \"}\n            for{\" \"}\n            <span className=\"font-semibold\">\n              {\" \"}\n              {differenceInMinutes(\n                new Date(data?.endDate),\n                new Date(data?.startDate)\n              )}{\" \"}\n            </span>\n            mins\n          </div>\n          <div>\n            {!data?.isCancelled && (\n              <button\n                onClick={() => {\n                  toggleCancelEvent(data._id);\n                }}\n                className=\"btn btn-light btn-sm\"\n              >\n                No Show\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* Payment Information */}\n        {data?.transactionId && (\n          <div className=\"mt-3 p-3 bg-light rounded border\">\n            <h6 className=\"font-weight-bold mb-2\">\n              Online Payment Information\n            </h6>\n            <div className=\"row\">\n              <div className=\"col-md-4\">\n                <div className=\"d-flex align-items-center\">\n                  <small className=\"text-muted me-2\">Status</small>\n                  <span className=\"badge text-success me-2\">\n                    {data.transactionId.payment_Status}\n                  </span>\n                </div>\n              </div>\n              <div className=\"col-md-4\">\n                <div className=\"d-flex align-items-center\">\n                  <small className=\"text-muted me-2\">Amount</small>\n                  <span className=\"font-weight-bold text-primary me-2\">\n                    ₹{data.transactionId.booking_price}\n                  </span>\n                </div>\n              </div>\n              <div className=\"col-md-4\">\n                <div className=\"d-flex align-items-center\">\n                  <small className=\"text-muted me-2\">Method</small>\n                  <span className=\"text-capitalize font-weight-bold me-2\">\n                    {data.transactionId.payment_method}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n        <div className=\"d-flex justify-content-end mt-3\">\n          {data?.chart && data?.doctor?.role === \"COUNSELLOR\" ? (\n            <>\n              <button\n                onClick={(e) => {\n                  setAppointment(data);\n                  dispatch(\n                    createEditChart({\n                      chart: CLINICAL_NOTE,\n                      isOpen: true,\n                      type: OPD,\n                      data: data.chart,\n                      patient: data.patient,\n                      doctor: data.doctor,\n                      appointment: data,\n                      shouldPrintAfterSave: true,\n                      populatePreviousAppointment: false,\n                    })\n                  );\n                }}\n                disabled={data?.isCancelled}\n                // style={{ pointerEvents: 'auto' }}\n                className=\"btn btn-primary btn-sm me-2 text-nowrap fs-10\"\n              >\n                Edit Note\n              </button>\n              <button\n                onClick={(e) => {\n                  setAppointment(data);\n                  dispatch(\n                    togglePrint({\n                      data: data.chart,\n                      modal: true,\n                      patient: data.patient,\n                      center: data.center,\n                      doctor: {\n                        ...data.doctor,\n                        profilePicture: null,\n                        signature: null\n                      },\n                    })\n                  );\n                }}\n                disabled={data?.isCancelled}\n                // style={{ pointerEvents: 'auto' }}\n                className=\"btn btn-primary btn-sm me-2 text-nowrap fs-10\"\n              >\n                View Note\n              </button>\n            </>\n          ) : data?.doctor?.role === \"COUNSELLOR\" ? (\n            <button\n              onClick={(e) => {\n                // setAppointment(data);\n                dispatch(setChartDate(new Date().toISOString()));\n                dispatch(\n                  createEditChart({\n                    chart: CLINICAL_NOTE,\n                    isOpen: true,\n                    type: OPD,\n                    patient: data.patient,\n                    appointment: data,\n                    shouldPrintAfterSave: true,\n                    populatePreviousAppointment: true,\n                  })\n                );\n              }}\n              disabled={data?.isCancelled}\n              // style={{ pointerEvents: 'auto' }}\n              className=\"btn btn-primary btn-sm me-2 text-nowrap fs-10\"\n            >\n              Create Note\n            </button>\n          ) : (\n            \"\"\n          )}\n          {data?.chart && data?.doctor?.role === \"DOCTOR\" ? (\n            <>\n              <button\n                onClick={(e) => {\n                  setAppointment(data);\n                  dispatch(\n                    createEditChart({\n                      chart: PRESCRIPTION,\n                      isOpen: true,\n                      type: OPD,\n                      data: data.chart,\n                      patient: data.patient,\n                      center: data.center?._id,\n                      doctor: {\n                        ...data.doctor,\n                        profilePicture: null,\n                        signature: null\n                      },\n                      appointment: data,\n                      shouldPrintAfterSave: true,\n                      populatePreviousAppointment: false,\n                    })\n                  );\n                }}\n                disabled={data?.isCancelled}\n                // style={{ pointerEvents: 'auto' }}\n                className=\"btn btn-primary btn-sm me-2 text-nowrap fs-10\"\n              >\n                Edit Prescription\n              </button>\n              <button\n                onClick={(e) => {\n                  setAppointment(data);\n                  dispatch(\n                    togglePrint({\n                      data: data.chart,\n                      modal: true,\n                      patient: data.patient,\n                      center: data.center,\n                      doctor: {\n                        ...data.doctor,\n                        profilePicture: null,\n                        signature: null\n                      },\n                    })\n                  );\n                }}\n                disabled={data?.isCancelled}\n                // style={{ pointerEvents: 'auto' }}\n                className=\"btn btn-primary btn-sm me-2 text-nowrap fs-10\"\n              >\n                View Prescription\n              </button>\n            </>\n          ) : data?.doctor?.role === \"DOCTOR\" ? (\n            <button\n              onClick={(e) => {\n                // setAppointment(data);\n                dispatch(setChartDate(new Date().toISOString()));\n                dispatch(\n                  createEditChart({\n                    chart: PRESCRIPTION,\n                    isOpen: true,\n                    type: OPD,\n                    patient: data.patient,\n                    center: data.center?._id,\n                    appointment: data,\n                    shouldPrintAfterSave: true,\n                    populatePreviousAppointment: true,\n                  })\n                );\n              }}\n              disabled={data?.isCancelled}\n              // style={{ pointerEvents: 'auto' }}\n              className=\"btn btn-primary btn-sm me-2 text-nowrap fs-10\"\n            >\n              Create Prescription\n            </button>\n          ) : (\n            \"\"\n          )}\n          {data?.bill ? (\n            <button\n              onClick={() => {\n                dispatch(\n                  togglePrint({\n                    data: data.bill,\n                    modal: true,\n                    patient: data.patient,\n                    center: data.center?._id,\n                    doctor: {\n                        ...data.doctor,\n                        profilePicture: null,\n                        signature: null\n                      },\n                    appointment: data._id,\n                  })\n                );\n              }}\n              className=\"btn btn-primary btn-sm text-nowrap fs-10\"\n            >\n              View Invoice\n            </button>\n          ) : (\n            <button\n              onClick={(e) => {\n                // setAppointment(data);\n                dispatch(setBillDate(new Date().toISOString()));\n                dispatch(\n                  createEditBill({\n                    bill: INVOICE,\n                    isOpen: true,\n                    type: OPD,\n                    patient: data.patient,\n                    center: data.center?._id,\n                    appointment: data,\n                    shouldPrintAfterSave: true,\n                  })\n                );\n              }}\n              disabled={data?.isCancelled}\n              className=\"btn btn-primary btn-sm text-nowrap fs-10\"\n            >\n              Collect Payment\n            </button>\n          )}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nEventInfo.propTypes = {};\n\nexport default EventInfo;\n","import { differenceInMinutes, format } from \"date-fns\";\nimport React from \"react\";\nimport { UncontrolledTooltip } from \"reactstrap\";\n\nconst DetailEventItem = ({ event }) => {\n  return (\n    <>\n      <div\n        // onClick={(e) => e.stopPropagation()}\n        id={`appointment-${event._id}`}\n        className=\"d-flex justify-content-between flex-wrap align-items-start\"\n      >\n        <div className=\"d-flex align-items-start\">\n          {event.chart && (event.bill || event.transactionId) && (\n            <span className=\"mt-n1\">\n              <i className=\"ri-checkbox-circle-line text-white fs-14\"></i>\n            </span>\n          )}\n          <h1\n            className=\"fs-12 mb-0 text-dark fst-italic\"\n            style={{\n              textDecoration: event.isCancelled ? \"line-through\" : \"\",\n            }}\n          >\n            {event.patient?.name}{\" \"}\n            {`${event?.patient?.id?.prefix}${event?.patient?.id?.value}`}\n            <span className=\"text-i\">\n              - {event?.center?.title}\n              {\" - \"}\n            </span>\n            <span className=\"text-i text-dark\">\n              {event?.consultationType}\n              {(event.chart || event.bill) && \"- (\"}\n              {event.chart && \"Prescribed\"}\n              {event.chart && (event.bill || event.transactionId) && \" , \"}\n              {(event.bill || event.transactionId) && \"Paid\"}\n              {(event.chart || event.bill) && \" )\"}\n            </span>\n          </h1>\n        </div>\n        <div>\n          <time\n            className={`fs-12 d-block ${\n              event.chart && event.bill\n                ? \"text-white\"\n                : event.chart\n                ? \"text-white\"\n                : \"text-dark\"\n            } w-100`}\n            style={{\n              textDecoration: event.isCancelled ? \"line-through\" : \"\",\n            }}\n          >\n            <span>{format(new Date(event.startDate), \"hh:mm a\")}</span>\n            <span className=\"mx-1\">-</span>\n            <span>{format(new Date(event.endDate), \"hh:mm a\")}</span>\n          </time>\n        </div>\n      </div>\n      <UncontrolledTooltip target={`appointment-${event._id}`}>\n        <span className=\"fs-9\">\n          Appointment with {event?.doctor?.name} at{\" \"}\n          {format(new Date(event.startDate), \"d MMMM y hh:mm a\")} for{\" \"}\n          {differenceInMinutes(\n            new Date(event.endDate),\n            new Date(event.startDate)\n          )}\n          {\" Min \"}\n          in {event.center?.title} center\n        </span>\n      </UncontrolledTooltip>\n    </>\n  );\n};\n\nconst EventItem = ({ event }) => {\n  return (\n    <>\n      <div\n        id={`appointment-${event._id}`}\n        className=\"d-flex justify-content-between flex-wrap align-items-start\"\n      >\n        <div className=\"d-flex align-items-start\">\n          {event.chart && event.bill && (\n            <span className=\"mt-n1\">\n              <i className=\"ri-checkbox-circle-line text-white fs-14\"></i>\n            </span>\n          )}\n          <h1\n            className=\"fs-12 mb-0 text-dark fst-italic\"\n            style={{\n              textDecoration: event.isCancelled ? \"line-through\" : \"\",\n            }}\n          >\n            {event.patient?.name}{\" \"}\n          </h1>\n        </div>\n      </div>\n      <UncontrolledTooltip target={`appointment-${event._id}`}>\n        <span className=\"fs-9\">\n          Appointment with {event?.doctor?.name} at{\" \"}\n          {format(new Date(event.startDate), \"d MMMM y hh:mm a\")} for{\" \"}\n          {differenceInMinutes(\n            new Date(event.endDate),\n            new Date(event.startDate)\n          )}\n          {\" Min \"}\n          in {event.center?.title} center\n        </span>\n      </UncontrolledTooltip>\n    </>\n  );\n};\n\nexport { DetailEventItem, EventItem };\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Calendar, momentLocalizer, Views } from \"react-big-calendar\";\nimport EventForm from \"./Components/Form\";\nimport { connect, useDispatch } from \"react-redux\";\nimport {\n  addClinicalNote,\n  cancelAppointment,\n  fetchAllDoctorSchedule,\n  fetchAppointments,\n  fetchCenters,\n  fetchUserSchedule,\n  removeAppointment,\n  setCurrentEvent,\n  setEventDate,\n  toggleAppointmentForm,\n  updateClinicalNote,\n} from \"../../store/actions\";\nimport EventInfo from \"./Components/EventInfo\";\nimport DeleteModal from \"../../Components/Common/DeleteModal\";\nimport ChartForm from \"../Patient/ChartForm\";\nimport BillForm from \"../Patient/BillForm\";\nimport { OPD } from \"../../Components/constants/patient\";\nimport Print from \"../../Components/Print\";\nimport { endOfDay, startOfDay } from \"date-fns\";\nimport moment from \"moment\";\nimport Schedule from \"./Components/Schedule\";\nimport CustomModal from \"../../Components/Common/Modal\";\nimport { stringToRgbaColor } from \"../../Components/Scheduler/utils/schedular\";\nimport { EventItem, DetailEventItem } from \"./Components/EventItem\";\n\nconst localizer = momentLocalizer(moment);\nconst Booking = ({\n  user,\n  appointments,\n  appointmentForm,\n  centerAccess,\n  patients,\n  activeEvent,\n}) => {\n  const dispatch = useDispatch();\n  const [range, setRange] = useState();\n  const [view, setView] = useState(Views.DAY);\n  const [appointment, setAppointment] = useState();\n  const [scheduleModal, setScheduleModal] = useState(false);\n  const toggleSchedule = () => setScheduleModal(!scheduleModal);\n  const toggleInfo = (data) => {\n    dispatch(setCurrentEvent({ isOpen: !activeEvent.isOpen, data }));\n  };\n  const [cancelEvent, setCancelEvent] = useState({\n    isOpen: false,\n    id: null,\n  });\n  const toggleCancelEvent = (id) =>\n    setCancelEvent({ isOpen: !cancelEvent.isOpen, id });\n  const [deleteEvent, setDeleteEvent] = useState({\n    isOpen: false,\n    id: null,\n  });\n  const toggleDeleteEvent = (id) =>\n    setDeleteEvent({ isOpen: !deleteEvent.isOpen, id });\n\n  useEffect(() => {\n    dispatch(\n      fetchAllDoctorSchedule({\n        centerAccess: JSON.stringify(user.centerAccess),\n      })\n    );\n    dispatch(\n      fetchAppointments({\n        centerAccess,\n        start: startOfDay(new Date()),\n        end: endOfDay(new Date()),\n      })\n    );\n    dispatch(fetchCenters(user.centerAccess));\n  }, [dispatch, user, centerAccess, patients]);\n\n  useEffect(() => {\n    dispatch(fetchUserSchedule(user._id));\n  }, [dispatch, user]);\n\n  const onSubmitClinicalForm = (\n    values,\n    files,\n    editChartData,\n    editClinicalNote\n  ) => {\n    const {\n      author,\n      patient,\n      center,\n      centerAddress,\n      addmission,\n      appointment,\n      shouldPrintAfterSave,\n      chart,\n      type,\n      date,\n      complaints,\n      observations,\n      diagnosis,\n      notes,\n    } = values;\n    const formData = new FormData();\n    formData.append(\"shouldPrintAfterSave\", true);\n    formData.append(\"author\", author);\n    formData.append(\"patient\", patient);\n    formData.append(\"center\", center);\n    formData.append(\"centerAddress\", centerAddress);\n    if (appointment) formData.append(\"appointment\", appointment);\n    if (addmission) formData.append(\"addmission\", addmission);\n    formData.append(\"shouldPrintAfterSave\", shouldPrintAfterSave);\n    formData.append(\"chart\", chart);\n    formData.append(\"type\", type);\n    if (date) formData.append(\"date\", date);\n    formData.append(\"complaints\", complaints);\n    formData.append(\"observations\", observations);\n    formData.append(\"diagnosis\", diagnosis);\n    formData.append(\"notes\", notes);\n    files.forEach((file) => formData.append(\"file\", file.file));\n\n    if (editClinicalNote) {\n      formData.append(\"id\", editChartData._id);\n      formData.append(\"chartId\", editClinicalNote._id);\n      dispatch(updateClinicalNote(formData));\n    } else {\n      dispatch(addClinicalNote(formData));\n    }\n  };\n\n  const toggleForm = (data) => {\n    dispatch(\n      toggleAppointmentForm({\n        isOpen: !appointmentForm.isOpen,\n        data: data,\n      })\n    );\n  };\n\n  useEffect(() => {\n    const handleClick = (e) => {\n      const time = e.currentTarget.parentElement.getAttribute(\"data-start\");\n      if (time) {\n        dispatch(setEventDate(time));\n        toggleForm();\n      }\n    };\n\n    const slots = document.querySelectorAll(\".rbc-time-slot\");\n\n    slots.forEach((slot) => {\n      if (!slot.querySelector(\".rbc-time-slot-overlay\")) {\n        const overlay = document.createElement(\"div\");\n        overlay.className = \"rbc-time-slot-overlay\";\n        overlay.addEventListener(\"click\", handleClick);\n        slot.appendChild(overlay);\n      }\n    });\n\n    return () => {\n      slots.forEach((slot) => {\n        const overlay = slot.querySelector(\".rbc-time-slot-overlay\");\n        if (overlay) {\n          overlay.removeEventListener(\"click\", handleClick);\n          overlay.remove();\n        }\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [view, range]);\n\n  console.log(appointments, \"appointments\");\n\n  return (\n    <React.Fragment>\n      <div className=\"page-content\">\n        {(user.role === \"DOCTOR\" || user.role === \"COUNSELLOR\") && (\n          <div className=\"d-flex justify-content-end mb-2\">\n            <button\n              onClick={() => setScheduleModal(!scheduleModal)}\n              className=\"btn btn-secondary btn-sm\"\n            >\n              <i className=\"ri-settings-3-line text-white fs-5\"></i>\n            </button>\n          </div>\n        )}\n        <Calendar\n          events={appointments.map((app) => ({\n            ...app,\n            startDate: new Date(app.startDate),\n            endDate: new Date(app.endDate),\n          }))}\n          step={15}\n          min={new Date(2025, 1, 19, 6, 0)}\n          max={new Date(2025, 1, 19, 22, 0)}\n          scrollToTime={new Date(2025, 1, 19, 9, 0)}\n          timeslots={1}\n          localizer={localizer}\n          startAccessor=\"startDate\"\n          endAccessor=\"endDate\"\n          dayLayoutAlgorithm={\"no-overlap\"}\n          view={view}\n          onView={(view) => setView(view)}\n          slotPropGetter={(date) => {\n            return {\n              \"data-start\": date.toISOString(),\n              style: {\n                height: \"30px\",\n                position: \"relative\",\n              },\n            };\n          }}\n          components={{\n            event: view === Views.MONTH ? EventItem : DetailEventItem,\n          }}\n          onRangeChange={(range) => {\n            setRange(range);\n            if (range?.length === 1)\n              dispatch(\n                fetchAppointments({\n                  centerAccess,\n                  start: startOfDay(range[0]),\n                  end: endOfDay(range[0]),\n                })\n              );\n            else if (range?.length > 1)\n              dispatch(\n                fetchAppointments({\n                  centerAccess,\n                  start: startOfDay(range[0]),\n                  end: endOfDay(range[range.length - 1]),\n                })\n              );\n            else\n              dispatch(\n                fetchAppointments({\n                  centerAccess,\n                  start: startOfDay(range.start),\n                  end: endOfDay(range.end),\n                })\n              );\n          }}\n          eventPropGetter={(event, start, end, isSelected) => {\n            const backgroundColor =\n              event.doctor?._id && stringToRgbaColor(event.doctor?._id, 0.7);\n\n            return {\n              style: {\n                backgroundColor:\n                  event.isCancelled || (event.chart && event.bill)\n                    ? \"rgba(0, 0, 0, 0.3)\"\n                    : event.chart\n                    ? \"\"\n                    : backgroundColor,\n                ...(event.chart &&\n                  !event.bill && {\n                    background: \"linear-gradient(to right, #bdc3c7, #2c3e50)\",\n                  }),\n              },\n            };\n          }}\n          onSelecting={(slot) => {}}\n          draggableAccessor={(event) => false}\n          resizableAccessor={(event) => false}\n          longPressThreshold={10000}\n          onSelectEvent={(event) => {\n            toggleInfo(event);\n          }}\n          titleAccessor={(prop) => prop?.patient?.name || \"Dummy\"}\n          style={{ height: 600 }}\n          selectable\n        />\n        <CustomModal\n          size={\"lg\"}\n          centered\n          isOpen={appointmentForm.isOpen}\n          toggle={toggleForm}\n        >\n          <EventForm editEvent={appointmentForm.data} toggleForm={toggleForm} />\n        </CustomModal>\n        <CustomModal\n          size={\"lg\"}\n          centered\n          isOpen={activeEvent.isOpen}\n          toggle={toggleInfo}\n        >\n          <EventInfo\n            data={activeEvent.data}\n            setAppointment={setAppointment}\n            toggleForm={toggleForm}\n            toggleCancelEvent={toggleCancelEvent}\n            toggleDeleteEvent={toggleDeleteEvent}\n          />\n        </CustomModal>\n        <DeleteModal\n          show={cancelEvent.isOpen}\n          onCloseClick={toggleCancelEvent}\n          onDeleteClick={() => {\n            setCancelEvent({\n              isOpen: false,\n              id: null,\n            });\n            toggleInfo();\n            dispatch(cancelAppointment({ id: cancelEvent.id }));\n          }}\n        />\n        <DeleteModal\n          show={deleteEvent.isOpen}\n          onCloseClick={toggleDeleteEvent}\n          onDeleteClick={() => {\n            setDeleteEvent({\n              isOpen: false,\n              id: null,\n            });\n            toggleInfo();\n            dispatch(removeAppointment(deleteEvent.id));\n            dispatch(\n              setCurrentEvent({\n                isOpen: false,\n                data: null,\n              })\n            );\n          }}\n        />\n        <ChartForm type={OPD} onSubmitClinicalForm={onSubmitClinicalForm} />\n        <BillForm type={OPD} />\n        <CustomModal\n          title={\"User Schedule\"}\n          centered\n          isOpen={scheduleModal}\n          toggle={toggleSchedule}\n          size={\"xl\"}\n          className={\"h-100\"}\n        >\n          <Schedule\n            doctor={user}\n            isOpen={scheduleModal}\n            toggle={toggleSchedule}\n          />\n        </CustomModal>\n        <Print />\n      </div>\n    </React.Fragment>\n  );\n};\n\nBooking.propTypes = {\n  appointments: PropTypes.array,\n  user: PropTypes.object.isRequired,\n  currentEvent: PropTypes.object,\n  centerAccess: PropTypes.array,\n};\n\nconst mapStateToProps = (state) => ({\n  appointmentForm: state.Booking.form,\n  appointments: state.Booking.data,\n  activeEvent: state.Booking.event,\n  user: state.User.user,\n  userSchedule: state.User.schedule,\n  currentEvent: state.Booking.event,\n  patients: state.Patient.allPatients,\n  centerAccess: state.User.centerAccess,\n});\n\nexport default connect(mapStateToProps)(Booking);\n","import {\n  format,\n  addDays,\n  subDays,\n  startOfWeek,\n  eachDayOfInterval,\n  isEqual,\n  isWithinInterval,\n  addMinutes,\n  areIntervalsOverlapping,\n} from \"date-fns\";\n\n/* LAYOUTS HELPERS */\nconst getMonthDates = (trackMonth, actionType) => {\n  let getSunday = startOfWeek(trackMonth, { weekStartsOn: 0 });\n\n  const dates =\n    actionType === \"init\" || actionType === \"next\"\n      ? eachDayOfInterval({ start: getSunday, end: addDays(getSunday, 41) })\n      : eachDayOfInterval({ start: getSunday, end: addDays(getSunday, 41) });\n\n  return dates;\n};\n\nconst getWeekDates = (currentDate, actionType) => {\n  let getSunday = startOfWeek(currentDate, { weekStartsOn: 0 });\n\n  const dates =\n    actionType === \"init\" || actionType === \"next\"\n      ? eachDayOfInterval({ start: getSunday, end: addDays(getSunday, 6) })\n      : eachDayOfInterval({ start: getSunday, end: addDays(getSunday, 6) });\n\n  return dates;\n};\n\nconst getDay = (currentDate, actionType) => {\n  const date =\n    actionType === \"next\" ? addDays(currentDate, 1) : subDays(currentDate, 1);\n\n  return date;\n};\n/* LAYOUTS HELPERS */\n\n/* FIND CORSSING EVENTS */\nconst traverseCrossingEvents = (events, event) => {\n  // { date, name }  [ { date, name } ]\n  return (events || []).filter((e) => {\n    // console.table(format(event.startDate, 'dd MMMM yyyy h:mm a'));\n    // console.table(format(e.startDate, 'dd MMMM yyyy h:mm a'));\n\n    return (\n      // event.id !== e.id &&\n      areIntervalsOverlapping(\n        {\n          start: new Date(event.startDate),\n          end: new Date(event.endDate),\n        },\n        { start: new Date(e.startDate), end: new Date(e.endDate) }\n      )\n      // isWithinInterval(addMinutes(new Date(event.startDate), 1), {\n      //   start: new Date(e.startDate),\n      //   end: new Date(e.endDate),\n      // }) ||\n      // isWithinInterval(addMinutes(new Date(event.endDate), -1), {\n      //   start: new Date(e.startDate),\n      //   end: new Date(e.endDate),\n      // }) ||\n      // isWithinInterval(addMinutes(new Date(e.startDate), 1), {\n      //   start: new Date(event.startDate),\n      //   end: new Date(event.endDate),\n      // }) ||\n      // isWithinInterval(addMinutes(new Date(e.endDate), -1), {\n      //   start: new Date(event.startDate),\n      //   end: new Date(event.endDate),\n      // })\n    );\n  });\n};\n\n/* COMPARE AND FIND EVENT CORSSING EVENTS WITH EACH OTHER */\nconst compareEventCrossingEvents = (events, event) => {\n  const crossingEvents = [event];\n\n  const newEvents = events.filter((e) => e.id !== event.id);\n\n  newEvents.forEach((e, i) => {\n    newEvents.slice(i + 1, newEvents.length).forEach((ev) => {\n      const check = isWithinInterval(ev.startDate, {\n        start: e.startDate,\n        end: e.endDate,\n      });\n\n      const chkEvent1 = crossingEvents.find((val) => val.id === e.id);\n      const chkEvent2 = crossingEvents.find((val) => val.id === ev.id);\n      if (check) {\n        if (chkEvent1 ? false : true) crossingEvents.push(e);\n        if (chkEvent2 ? false : true) crossingEvents.push(ev);\n      }\n    });\n  });\n\n  return crossingEvents;\n};\n\nfunction stringToRgbaColor(str, alpha) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  // Generate RGB values\n  const rgb = Math.abs((Math.sin(hash) * 10000) % 1) * 16777216;\n  const r = (rgb >> 16) & 255;\n  const g = (rgb >> 8) & 255;\n  const b = rgb & 255;\n\n  // Return RGBA color\n  return `rgba(${r},${g},${b},${alpha})`;\n}\n\nexport {\n  getMonthDates,\n  getWeekDates,\n  getDay,\n  traverseCrossingEvents,\n  compareEventCrossingEvents,\n  stringToRgbaColor,\n};\n"],"names":["socket","io","config","BASE_URL","path","connect","state","patients","Patient","allPatients","searchLoading","centerAccess","User","_ref","validation","disabled","editEvent","filteredPatients","setFilteredPatients","useState","isSearching","setIsSearching","dropdown","setDropdown","debouncedOnChange","debounce","e","val","target","value","emit","useEffect","on","data","off","length","isNewPatient","values","patient","isClearAvai","_jsx","React","children","_jsxs","Dropdown","isOpen","toggle","direction","DropdownToggle","className","color","Input","patientName","onChange","setFieldValue","onKeyDown","key","preventDefault","size","RenderWhen","isTrue","style","right","Spinner","Button","onClick","outline","id","DropdownMenu","DropdownItem","map","item","_item$id","_item$center","_item$center2","concat","name","_id","phoneNumber","includes","gender","center","duration","hours","minutes","eventDate","Booking","centers","Center","doctors","Setting","doctorSchedule","slotsLoading","loading","doctorAvailableSlots","doctor","appointmentsInRange","patientPreviousDoctor","searchPhoneNumber","phoneNumberPatients","phoneNumberLoading","uidPatient","uidLoading","generatedPatientId","_editEvent$patient","_editEvent$patient$id","_editEvent$patient2","_editEvent$patient3","_editEvent$patient4","_editEvent$patient4$p","_editEvent$patient5","_editEvent$patient6","_editEvent$patient7","_editEvent$center","_editEvent$doctor","toggleForm","dispatch","useDispatch","dateSlots","setDateSlots","uidDropdown","setUidDropdown","slotsError","setSlotsError","selectRef","useRef","useFormik","enableReinitialize","initialValues","uid","consultationType","startDate","Date","endDate","addMinutes","at","differenceInHours","differenceInMinutes","validationSchema","Yup","required","test","_parsePhoneNumberFrom","parsePhoneNumberFromString","nationalNumber","isValidPhoneNumber","isValid","find","format","areIntervalsOverlapping","start","end","onSubmit","_generatedPatientId$v","updateAppointment","addAppointment","_objectSpread","replace","resetForm","fetchPatientPreviousDoctor","fetchPatientId","filterDoctors","docs","doc","filter","_doc$centerAccess","_doc$user","user","_validation$values$du","split","Number","fetchDoctorSchedule","doctorId","centerId","date","meetingType","slotDuration","current","focus","calcDuration","totalMinutes","Math","floor","Form","handleSubmit","action","Label","htmlFor","type","handleChange","onBlur","handleBlur","placeholder","bsSize","searchUidPatient","top","bottom","touched","errors","FormFeedback","Row","Col","xs","md","PhoneInputWithCountrySelect","phNumber","number","searchPatientPhoneNumber","defaultCountry","height","_item$id2","_item$center3","SearchPatient","label","options","field","idx","checked","invalid","selected","hidden","findDocCenterSchedule","cen","day","_doc$workingSchedule","_doc$workingSchedule$","workingSchedule","_item$days","days","getDay","option","title","defaultValue","Flatpicker","_ref2","sDate","nDate","updateSDate","setDate","setMonth","setYear","getFullYear","getMonth","getDate","updateNDate","dateFormat","time_24hr","ref","selectedOption","selectedIndex","d","diffHours","diffMinutes","updatedSDate","setHours","getHours","setMinutes","getMinutes","updatedNDate","addHours","slot","booked","_data$doctor","_data$patient","_data$patient$profile","_data$patient2","_data$patient3","_data$patient4","_data$patient5","_data$patient5$id","_data$patient6","_data$patient6$id","_data$patient7","_data$patient8","_data$patient9","_data$doctor2","_data$doctor3","_data$doctor4","_data$doctor5","_data$doctor6","setAppointment","toggleCancelEvent","toggleDeleteEvent","meetingId","doctorName","isCancelled","_Fragment","MeetingComponent","userType","src","profilePicture","url","alt","Link","to","viewPatient","setTotalAmount","totalPayable","totalAdvance","prefix","email","transactionId","payment_Status","booking_price","payment_method","chart","role","createEditChart","CLINICAL_NOTE","OPD","appointment","shouldPrintAfterSave","populatePreviousAppointment","togglePrint","modal","signature","setChartDate","toISOString","_data$center","PRESCRIPTION","_data$center2","bill","_data$center3","_data$center4","setBillDate","createEditBill","INVOICE","DetailEventItem","_event$patient","_event$patient2","_event$patient2$id","_event$patient3","_event$patient3$id","_event$center","_event$doctor","_event$center2","event","textDecoration","UncontrolledTooltip","EventItem","_event$patient4","_event$doctor2","_event$center3","localizer","momentLocalizer","moment","appointmentForm","form","appointments","activeEvent","userSchedule","schedule","currentEvent","range","setRange","view","setView","Views","DAY","scheduleModal","setScheduleModal","toggleSchedule","toggleInfo","setCurrentEvent","cancelEvent","setCancelEvent","deleteEvent","setDeleteEvent","fetchAllDoctorSchedule","JSON","stringify","fetchAppointments","startOfDay","endOfDay","fetchCenters","fetchUserSchedule","toggleAppointmentForm","handleClick","time","currentTarget","parentElement","getAttribute","setEventDate","slots","document","querySelectorAll","forEach","querySelector","overlay","createElement","addEventListener","appendChild","removeEventListener","remove","console","log","Calendar","events","app","step","min","max","scrollToTime","timeslots","startAccessor","endAccessor","dayLayoutAlgorithm","onView","slotPropGetter","position","components","MONTH","onRangeChange","eventPropGetter","isSelected","backgroundColor","str","alpha","hash","i","charCodeAt","rgb","abs","sin","g","b","stringToRgbaColor","background","onSelecting","draggableAccessor","resizableAccessor","longPressThreshold","onSelectEvent","titleAccessor","prop","_prop$patient","selectable","CustomModal","centered","EventForm","EventInfo","DeleteModal","show","onCloseClick","onDeleteClick","cancelAppointment","removeAppointment","ChartForm","onSubmitClinicalForm","files","editChartData","editClinicalNote","author","centerAddress","addmission","complaints","observations","diagnosis","notes","formData","FormData","append","file","updateClinicalNote","addClinicalNote","BillForm","Schedule","Print"],"sourceRoot":""}