{"version":3,"file":"static/js/3593.87bba052.chunk.js","mappings":"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","sources":["../node_modules/@dytesdk/ui-kit/dist/esm/index-25aba8a9.js","../node_modules/@dytesdk/ui-kit/dist/esm/dyte-screen-share-toggle.entry.js"],"sourcesContent":["import { a as getElement } from './index-08f4416b.js';\nimport { o as appendElement, q as removeElement, u as uiStore } from './ui-store-11740cb4.js';\n\nfunction SyncWithStore() {\n    return function (proto, propName) {\n        const { connectedCallback, disconnectedCallback } = proto;\n        proto.connectedCallback = function () {\n            const host = getElement(this);\n            const value = host[propName];\n            if (!value) {\n                const storeValue = uiStore.state[propName];\n                host[propName] = storeValue;\n                appendElement(propName, host);\n            }\n            return connectedCallback === null || connectedCallback === void 0 ? void 0 : connectedCallback.call(this);\n        };\n        proto.disconnectedCallback = function () {\n            removeElement(propName, getElement(this));\n            return disconnectedCallback === null || disconnectedCallback === void 0 ? void 0 : disconnectedCallback.call(this);\n        };\n    };\n}\n\nexport { SyncWithStore as S };\n","import { r as registerInstance, c as createEvent, h, H as Host } from './index-08f4416b.js';\nimport { a as defaultIconPack, c as useLanguage } from './ui-store-11740cb4.js';\nimport { l as logger } from './logger-31448943.js';\nimport { S as SyncWithStore } from './index-25aba8a9.js';\n\nconst dyteScreenShareToggleCss = \":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}\";\nconst DyteScreenShareToggleStyle0 = dyteScreenShareToggleCss;\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n        r = Reflect.decorate(decorators, target, key, desc);\n    else\n        for (var i = decorators.length - 1; i >= 0; i--)\n            if (d = decorators[i])\n                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst deviceCanScreenShare = () => {\n    return (typeof navigator !== 'undefined' &&\n        typeof navigator.mediaDevices !== 'undefined' &&\n        'getDisplayMedia' in navigator.mediaDevices);\n};\nconst DyteScreenShareToggle = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.stateUpdate = createEvent(this, \"dyteStateUpdate\", 7);\n        this.dyteAPIError = createEvent(this, \"dyteAPIError\", 7);\n        /** Variant */\n        this.variant = 'button';\n        /** Icon pack */\n        this.iconPack = defaultIconPack;\n        /** Language */\n        this.t = useLanguage();\n        /**\n         * Maximum screen share count (value from preset)\n         * -1 denotes there is no limit on maximum\n         */\n        this.maxScreenShareCount = -1;\n        this.screenShareCount = 0;\n        this.screenShareEnabled = false;\n        this.canScreenShare = false;\n        this.shareScreenPermission = 'NOT_REQUESTED';\n        this.screenShareState = {\n            tooltipLabel: this.t('screenshare.start'),\n            label: this.t('screenshare.start'),\n            icon: this.iconPack.share_screen_start,\n            classList: {},\n            showWarning: false,\n            disable: false,\n        };\n        this.stageStatus = 'OFF_STAGE';\n        this.screenShareListener = () => {\n            const activeScreenShares = this.meeting.participants.active\n                .toArray()\n                .filter((p) => p.screenShareEnabled).length;\n            const selfScreenShare = this.meeting.self.screenShareEnabled ? 1 : 0;\n            this.screenShareCount = activeScreenShares + selfScreenShare;\n            this.screenShareEnabled = this.meeting.self.screenShareEnabled;\n            this.getState();\n            this.meeting.__internals__.logger.info('dyteScreenShare::screenShareUpdate', {\n                media: {\n                    screenshare: {\n                        enabled: this.screenShareEnabled,\n                        count: this.screenShareCount,\n                    },\n                },\n            });\n        };\n        this.participantLeftListener = ({ screenShareEnabled }) => {\n            if (screenShareEnabled) {\n                // decrement count if participant who left had screenShareEnabled\n                // and don't let it go below 0 (just a failsafe)\n                this.screenShareCount = Math.max(this.screenShareCount - 1, 0);\n                this.getState();\n                this.meeting.__internals__.logger.info('dyteScreenShare::screenShareUpdate', {\n                    media: {\n                        screenshare: {\n                            enabled: this.screenShareEnabled,\n                            count: this.screenShareCount,\n                        },\n                    },\n                });\n            }\n        };\n        this.stageStatusListener = () => {\n            this.stageStatus = this.meeting.stage.status;\n            this.canScreenShare = this.meeting.self.permissions.canProduceScreenshare === 'ALLOWED';\n        };\n        this.mediaPermissionUpdateListener = ({ kind, message }) => {\n            if (kind === 'screenshare') {\n                this.shareScreenPermission = message;\n                this.getState();\n                if (message === 'COULD_NOT_START') {\n                    this.dyteAPIError.emit({\n                        trace: this.t('screenshare.permissions'),\n                        message: this.t('screenshare.error.unknown'),\n                    });\n                }\n                if (this.hasPermissionError()) {\n                    const permissionModalSettings = {\n                        enabled: true,\n                        kind: 'screenshare',\n                    };\n                    this.stateUpdate.emit({ activePermissionsMessage: permissionModalSettings });\n                }\n            }\n        };\n        this.reachedMaxScreenShares = () => {\n            // checks if a limit exists, and if limit is reached\n            return this.maxScreenShareCount > 0 && this.screenShareCount >= this.maxScreenShareCount;\n        };\n        this.toggleScreenShare = async () => {\n            var _a;\n            if (this.screenShareState.disable)\n                return;\n            if (this.hasPermissionError()) {\n                const permissionModalSettings = {\n                    enabled: true,\n                    kind: 'screenshare',\n                };\n                this.stateUpdate.emit({ activePermissionsMessage: permissionModalSettings });\n                return false;\n            }\n            const self = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self;\n            if (this.screenShareEnabled) {\n                self.disableScreenShare();\n                return;\n            }\n            if (self == null ||\n                !this.canScreenShare ||\n                this.reachedMaxScreenShares() ||\n                this.hasPermissionError())\n                return;\n            this.screenShareState = Object.assign(Object.assign({}, this.screenShareState), { disable: true });\n            await self.enableScreenShare();\n            this.screenShareState = Object.assign(Object.assign({}, this.screenShareState), { disable: false });\n            this.stateUpdate.emit({ activeMoreMenu: false });\n        };\n    }\n    connectedCallback() {\n        if (!deviceCanScreenShare()) {\n            logger.error('[dyte-screenshare-toggle] Device does not support screensharing.');\n            return;\n        }\n        this.meetingChanged(this.meeting);\n    }\n    disconnectedCallback() {\n        var _a, _b, _c, _d, _e, _f;\n        (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.participants.joined.removeListener('screenShareUpdate', this.screenShareListener);\n        (_b = this.meeting) === null || _b === void 0 ? void 0 : _b.participants.joined.removeListener('participantLeft', this.participantLeftListener);\n        (_c = this.meeting) === null || _c === void 0 ? void 0 : _c.self.removeListener('screenShareUpdate', this.screenShareListener);\n        (_d = this.meeting) === null || _d === void 0 ? void 0 : _d.self.removeListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);\n        (_f = (_e = this.meeting) === null || _e === void 0 ? void 0 : _e.stage) === null || _f === void 0 ? void 0 : _f.removeListener('stageStatusUpdate', this.stageStatusListener);\n    }\n    meetingChanged(meeting) {\n        if (meeting != null) {\n            const { self, stage } = meeting;\n            this.canScreenShare = this.meeting.self.permissions.canProduceScreenshare === 'ALLOWED';\n            this.maxScreenShareCount = self.config.maxScreenShareCount;\n            this.screenShareEnabled = self.screenShareEnabled;\n            let screenShareCount = 0;\n            for (const participant of meeting.participants.joined.toArray()) {\n                if (participant.screenShareEnabled) {\n                    screenShareCount++;\n                }\n            }\n            this.screenShareCount = screenShareCount;\n            this.getState();\n            meeting.__internals__.logger.info('dyteScreenShare::initialise', {\n                media: {\n                    screenshare: {\n                        enabled: this.screenShareEnabled,\n                        count: this.screenShareCount,\n                        maxAllowedCount: this.maxScreenShareCount,\n                    },\n                },\n            });\n            this.stageStatus = meeting.stage.status;\n            meeting.participants.joined.addListener('screenShareUpdate', this.screenShareListener);\n            meeting.participants.joined.addListener('participantLeft', this.participantLeftListener);\n            self.addListener('screenShareUpdate', this.screenShareListener);\n            self.addListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);\n            stage === null || stage === void 0 ? void 0 : stage.addListener('stageStatusUpdate', this.stageStatusListener);\n        }\n    }\n    hasPermissionError() {\n        return (this.shareScreenPermission === 'SYSTEM_DENIED' || this.shareScreenPermission === 'DENIED');\n    }\n    getState() {\n        let tooltipLabel = '';\n        let label = '';\n        let icon = '';\n        let classList = {};\n        const hasError = this.hasPermissionError() && !this.screenShareEnabled;\n        const limitReached = this.reachedMaxScreenShares() && !this.screenShareEnabled;\n        const couldNotStart = this.shareScreenPermission === 'COULD_NOT_START';\n        if (this.screenShareEnabled && !hasError) {\n            label = this.t('screenshare.stop');\n            icon = this.iconPack.share_screen_stop;\n            classList['red-icon'] = true;\n        }\n        else {\n            label = this.t('screenshare.start');\n            icon = this.iconPack.share_screen_start;\n        }\n        if (this.shareScreenPermission === 'SYSTEM_DENIED') {\n            tooltipLabel = this.t('perm_sys_denied.screenshare');\n            classList['red-icon'] = true;\n        }\n        else if (this.shareScreenPermission === 'DENIED') {\n            tooltipLabel = this.t('perm_denied.screenshare');\n            classList['red-icon'] = true;\n        }\n        else {\n            tooltipLabel = label;\n        }\n        if (limitReached) {\n            tooltipLabel = this.t('screenshare.error.max_count');\n        }\n        if (couldNotStart) {\n            tooltipLabel = this.t('screenshare.error.unknown');\n        }\n        this.screenShareState = {\n            tooltipLabel,\n            label,\n            icon,\n            classList,\n            disable: hasError || limitReached,\n            showWarning: hasError || limitReached || couldNotStart,\n        };\n    }\n    render() {\n        if (!deviceCanScreenShare() ||\n            !this.canScreenShare ||\n            ['OFF_STAGE', 'REQUESTED_TO_JOIN_STAGE'].includes(this.stageStatus)) {\n            return null;\n        }\n        return (h(Host, { title: this.screenShareState.label }, h(\"dyte-tooltip\", { placement: \"top\", kind: \"block\", label: this.screenShareState.tooltipLabel, delay: 600, part: \"tooltip\" }, h(\"dyte-controlbar-button\", { part: \"controlbar-button\", size: this.size, iconPack: this.iconPack, variant: this.variant, label: this.screenShareState.label, icon: this.screenShareState.icon, class: this.screenShareState.classList, onClick: this.toggleScreenShare, disabled: this.screenShareState.disable, showWarning: this.screenShareState.showWarning }))));\n    }\n    static get watchers() { return {\n        \"meeting\": [\"meetingChanged\"]\n    }; }\n};\n__decorate([\n    SyncWithStore()\n], DyteScreenShareToggle.prototype, \"states\", void 0);\n__decorate([\n    SyncWithStore()\n], DyteScreenShareToggle.prototype, \"meeting\", void 0);\n__decorate([\n    SyncWithStore()\n], DyteScreenShareToggle.prototype, \"size\", void 0);\n__decorate([\n    SyncWithStore()\n], DyteScreenShareToggle.prototype, \"iconPack\", void 0);\n__decorate([\n    SyncWithStore()\n], DyteScreenShareToggle.prototype, \"t\", void 0);\nDyteScreenShareToggle.style = DyteScreenShareToggleStyle0;\n\nexport { DyteScreenShareToggle as dyte_screen_share_toggle };\n"],"names":["SyncWithStore","proto","propName","connectedCallback","disconnectedCallback","host","getElement","this","storeValue","uiStore","state","appendElement","call","removeElement","__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","deviceCanScreenShare","navigator","mediaDevices","DyteScreenShareToggle","constructor","hostRef","registerInstance","stateUpdate","createEvent","dyteAPIError","variant","iconPack","defaultIconPack","t","useLanguage","maxScreenShareCount","screenShareCount","screenShareEnabled","canScreenShare","shareScreenPermission","screenShareState","tooltipLabel","label","icon","share_screen_start","classList","showWarning","disable","stageStatus","screenShareListener","activeScreenShares","meeting","participants","active","toArray","filter","p","selfScreenShare","self","getState","__internals__","logger","info","media","screenshare","enabled","count","participantLeftListener","_ref","Math","max","stageStatusListener","stage","status","permissions","canProduceScreenshare","mediaPermissionUpdateListener","_ref2","kind","message","emit","trace","hasPermissionError","permissionModalSettings","activePermissionsMessage","reachedMaxScreenShares","toggleScreenShare","async","_a","disableScreenShare","assign","enableScreenShare","activeMoreMenu","meetingChanged","error","_b","_c","_d","_e","_f","joined","removeListener","config","participant","maxAllowedCount","addListener","hasError","limitReached","couldNotStart","share_screen_stop","render","includes","h","Host","title","placement","delay","part","size","class","onClick","disabled","watchers","prototype","style"],"sourceRoot":""}